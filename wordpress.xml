<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.7.1" created="2013-12-12 19:30" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>frontend technology talk</title>
	<link>https://fettblog.eu</link>
	<description></description>
	<pubDate>Thu, 12 Dec 2013 19:30:28 +0000</pubDate>
	<language>en-GB</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://fettblog.eu</wp:base_site_url>
	<wp:base_blog_url>https://fettblog.eu</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>sbaumg@gmail.com</wp:author_email><wp:author_display_name><![CDATA[ddprrt]]></wp:author_display_name><wp:author_first_name><![CDATA[Stefan]]></wp:author_first_name><wp:author_last_name><![CDATA[Baumgartner]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>thpnk</wp:author_login><wp:author_email>thomas.pink@me.com</wp:author_email><wp:author_display_name><![CDATA[Thomas Pink]]></wp:author_display_name><wp:author_first_name><![CDATA[Thomas]]></wp:author_first_name><wp:author_last_name><![CDATA[Pink]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>34</wp:term_id><wp:category_nicename>barcamp</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Barcamp]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>browser</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Browser]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>cms</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CMS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>43</wp:term_id><wp:category_nicename>conference</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Conference]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>22</wp:term_id><wp:category_nicename>css</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CSS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>21</wp:term_id><wp:category_nicename>css3</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CSS3]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>feature-detection</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Feature Detection]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>general</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[General]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>html5</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[HTML5]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Javascript]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>33</wp:term_id><wp:category_nicename>jquery</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[jQuery]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>mobile</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Mobile]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>71</wp:term_id><wp:category_nicename>rant</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Rant]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>61</wp:term_id><wp:category_nicename>sass</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Sass]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>57</wp:term_id><wp:category_nicename>svg</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[SVG]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>64</wp:term_id><wp:category_nicename>tools</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Tools]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>25</wp:term_id><wp:category_nicename>webfonts</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Webfonts]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>62</wp:term_id><wp:category_nicename>workflows</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Workflows]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>agile</wp:tag_slug><wp:tag_name><![CDATA[Agile]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>android</wp:tag_slug><wp:tag_name><![CDATA[Android]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>animations</wp:tag_slug><wp:tag_name><![CDATA[Animations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>assemble-io</wp:tag_slug><wp:tag_name><![CDATA[assemble.io]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>audio</wp:tag_slug><wp:tag_name><![CDATA[Audio]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>barcamp</wp:tag_slug><wp:tag_name><![CDATA[Barcamp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>batman</wp:tag_slug><wp:tag_name><![CDATA[Batman]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>beyond-tellerrand</wp:tag_slug><wp:tag_name><![CDATA[beyond tellerrand]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>blink</wp:tag_slug><wp:tag_name><![CDATA[Blink]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>chrome</wp:tag_slug><wp:tag_name><![CDATA[Chrome]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug>codepen</wp:tag_slug><wp:tag_name><![CDATA[Codepen]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>connect</wp:tag_slug><wp:tag_name><![CDATA[connect]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug>content-first</wp:tag_slug><wp:tag_name><![CDATA[Content First]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[CSS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>css3</wp:tag_slug><wp:tag_name><![CDATA[CSS3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>ddprrt</wp:tag_slug><wp:tag_name><![CDATA[ddprrt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>design</wp:tag_slug><wp:tag_name><![CDATA[Design]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>domcontentloaded</wp:tag_slug><wp:tag_name><![CDATA[DOMContentLoaded]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>embedding</wp:tag_slug><wp:tag_name><![CDATA[embedding]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug>emmet</wp:tag_slug><wp:tag_name><![CDATA[Emmet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>eot</wp:tag_slug><wp:tag_name><![CDATA[EOT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>facebook</wp:tag_slug><wp:tag_name><![CDATA[Facebook]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>feature-sniffing</wp:tag_slug><wp:tag_name><![CDATA[feature sniffing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>features</wp:tag_slug><wp:tag_name><![CDATA[Features]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>filter</wp:tag_slug><wp:tag_name><![CDATA[filter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>fout</wp:tag_slug><wp:tag_name><![CDATA[FOUT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>fuuuuu</wp:tag_slug><wp:tag_name><![CDATA[Fuuuuu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>gettogether</wp:tag_slug><wp:tag_name><![CDATA[Gettogether]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>ghost</wp:tag_slug><wp:tag_name><![CDATA[Ghost]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>google</wp:tag_slug><wp:tag_name><![CDATA[Google]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>google-plus</wp:tag_slug><wp:tag_name><![CDATA[Google Plus]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug>grunt</wp:tag_slug><wp:tag_name><![CDATA[Grunt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3</wp:term_id><wp:tag_slug>html5</wp:tag_slug><wp:tag_name><![CDATA[HTML5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>icomoon</wp:tag_slug><wp:tag_name><![CDATA[IcoMoon]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>ie9</wp:tag_slug><wp:tag_name><![CDATA[IE9]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>ios</wp:tag_slug><wp:tag_name><![CDATA[iOS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>javascript-2</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>linz</wp:tag_slug><wp:tag_name><![CDATA[Linz]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>media-queries</wp:tag_slug><wp:tag_name><![CDATA[media queries]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>mobile</wp:tag_slug><wp:tag_name><![CDATA[Mobile]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>mobile-browsers</wp:tag_slug><wp:tag_name><![CDATA[Mobile Browsers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>modx</wp:tag_slug><wp:tag_name><![CDATA[ModX]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>mozilla</wp:tag_slug><wp:tag_name><![CDATA[Mozilla]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>node-js</wp:tag_slug><wp:tag_name><![CDATA[node.js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>orientation</wp:tag_slug><wp:tag_name><![CDATA[orientation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>parallax-scrolling</wp:tag_slug><wp:tag_name><![CDATA[Parallax Scrolling]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[PHP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>pinterest</wp:tag_slug><wp:tag_name><![CDATA[Pinterest]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>preprocessors</wp:tag_slug><wp:tag_name><![CDATA[preprocessors]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>progressive-enhancement</wp:tag_slug><wp:tag_name><![CDATA[Progressive Enhancement]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>rant</wp:tag_slug><wp:tag_name><![CDATA[Rant]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>responsive</wp:tag_slug><wp:tag_name><![CDATA[Responsive]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug>responsive-webdesign</wp:tag_slug><wp:tag_name><![CDATA[Responsive Webdesign]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>sass</wp:tag_slug><wp:tag_name><![CDATA[Sass]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>smacss</wp:tag_slug><wp:tag_name><![CDATA[SMACSS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>smil</wp:tag_slug><wp:tag_name><![CDATA[SMIL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>social-media</wp:tag_slug><wp:tag_name><![CDATA[Social Media]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>software-engineering</wp:tag_slug><wp:tag_name><![CDATA[Software Engineering]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug>specification</wp:tag_slug><wp:tag_name><![CDATA[Specification]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>static-site-generator</wp:tag_slug><wp:tag_name><![CDATA[static site generator]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>svg</wp:tag_slug><wp:tag_name><![CDATA[SVG]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug>tooling</wp:tag_slug><wp:tag_name><![CDATA[Tooling]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>twitter</wp:tag_slug><wp:tag_name><![CDATA[Twitter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>typescript</wp:tag_slug><wp:tag_name><![CDATA[TypeScript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>ux</wp:tag_slug><wp:tag_name><![CDATA[UX]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>vendor-prefixes</wp:tag_slug><wp:tag_name><![CDATA[Vendor Prefixes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>webfonts-2</wp:tag_slug><wp:tag_name><![CDATA[webfonts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>windows-phone</wp:tag_slug><wp:tag_name><![CDATA[Windows Phone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>woff</wp:tag_slug><wp:tag_name><![CDATA[WOFF]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>wordpress</wp:tag_slug><wp:tag_name><![CDATA[Wordpress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>workflows</wp:tag_slug><wp:tag_name><![CDATA[Workflows]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>yeoman</wp:tag_slug><wp:tag_name><![CDATA[yeoman]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.7.1</generator>

	<item>
				<title>Speaking</title>
		<link>https://fettblog.eu/talks-slides/</link>
		<pubDate>Mon, 19 Nov 2012 15:44:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?page_id=57</guid>
		<description></description>
		<content:encoded><![CDATA[<p>From time to time I speak at conferences and other events, mostly about mobile browser quirks, progressive enhancement, front-end development in large groups and tooling.</p>

<h2>Upcoming apperances</h2>

<ul>
<li>March 2014, 7th: <a href="http://javascript-days.de">JavaScript Days</a>, Munich</li>
<ol>
<li>Frontend Tooling with Yeoman and Grunt</li>
</ol>
</ul>

<h2>Previous appearances</h2>

<h3>2013</h3>

<ul>
<li>November 2013: <a href="http://2013.drupalcamp.at/">DrupalCamp</a>, Vienna 
<ol>
<li>Gaining Control in the Great Unknown - <a href="https://speakerdeck.com/ddprrt/gaining-control-in-the-great-unknown-the-state-of-mobile-browsers-and-how-to-handle-them">Slides (Speakerdeck)</a></li>
</ol></li>
<li>November 2013: <a href="http://topconf.com">Topconf</a>, Tallinn <ol>
<li>Mobile Browser Games - <a href="https://speakerdeck.com/ddprrt/mobile-browser-games-topconf-tallin-html5-games-browsers">Slides (Speakerdeck)</a></li>
<li>Keep Calm and Browse Happy - <a href="https://speakerdeck.com/ddprrt/keep-calm-and-browse-happy-gaining-speed-on-mobile-browsers">Slides (Speakerdeck)</a></li>
<li>Panel Discussion on Mobile HTML5 with Max Firtman</li>
</ol></li>

<li>October 2013: <a href="http://digitalvisions.liechtenecker.at">Digital Visions</a>, Vienna
<ol><li>The Perfect Steak - <a href="https://speakerdeck.com/ddprrt/digital-visions-2013-the-perfect-steak">Slides (Speakerdeck)</a></li></ol>
</li>
<li>May 2013: <a href="http://beyondtellerand.com">beyond tellerrand 2013 - Developer Garden Stage</a>, Düsseldorf<ol><li>Mobile Browser Games - Great Expectations - <a href="https://speakerdeck.com/ddprrt/beyond-tellerrand-developer-garden-talk-mobile-browser-games">Slides (Speakerdeck)</a></li></ol></li>
<li>April 2013: <a href="http://bdconf.com">Breaking Development - Orlando 2013</a><ol><li>Mobile Browser Games - Great Expectations - <a href="http://vimeo.com/64197060">Video</a> - <a href="https://speakerdeck.com/ddprrt/mobile-browser-games-breaking-development-orlando-2013">Slides (Speakerdeck)</a></li></ol></li>
</ul>

<h3>2012</h3>

<ul>
<li>October 2012: <a href="http://liechtenecker.at/digital-visions-2012/#blog-article" target="_blank">Digital Visions</a>, Vienna - <a href="/slides/DIV12" target="_blank">Mobile Frontend Development</a></li>
<li>October 2012: <a href="http://atag.accessiblemedia.at/2012/" target="_blank">ATAG 2012</a>, Vienna - <a href="/slides/ATAG2012" target="_blank">Mobile Frontend Development</a> (ext.)</li>
<li>March 2012: <a href="http://lanyrd.com/2012/salzburg-nextweb-march-2012/" target="_blank">Barcamp "The next web"</a> in Salzburg - <a href="/slides/HTML5Mobile" target="_blank">HTML 5 Mobile</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2012-11-19 17:44:04</wp:post_date>
		<wp:post_date_gmt>2012-11-19 15:44:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>talks-slides</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>When to use jQuery - Part 1</title>
		<link>https://fettblog.eu/?p=62</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[jQuery is a blast! It has a very easy to understand and mighty API, plus it does us web developers a big favour: It fixes years of DOM raping with one handy interface. Getting into jQuery is very easy, and even if you don't have that much experience in software development or programming in general, you will get good results very fast. 

However, jQuery's biggest advantage is also it's greatest flaw. As easily as you can create something, you can also destroy a browser's performance by not knowing what you are actually doing. jQuery is a beast, and this little series will show some examples and situations, where it isn't always the right choice.

There are plenty of jQuery performance tutorials out there, <a href="http://addyosmani.com/jqprovenperformance/" target="_blank">Addy Osmani</a> released a very good overview once, so this series will focus on mobile browsers, which are known for their mostly slow Javascript engines. (But most of the conclusions also apply to the Desktop, when considering modern browsers).

<!--more-->

<h2>Habits and Facts</h2>

For starters we have to establish some facts and goals. We will consider how we developed with jQuery in the past, and how does the new environment of mobiles browsers react to our habits of coding?

The answer to the first question is easy: jQuery was designed to easily select nodes (elements) from our DOM and manipulate them in any way possible. Mostly we will add new content or manipulate existing one by changing contents and/or their display status in any way thinkable (hiding, showing, animating to different style properties. Mostly we use jQuery for those tasks:

<ol>
	<li>selecting elements, often using advanced selectors (<strong>Selecting</strong>)</li>
	<li>traversing through the DOM by having an element as starting point (<strong>Traversing</strong>)</li>
	<li>changing the visibility or visual features of an element (<strong>Manipulation</strong>)</li>
	<li>listen to browser events and execute code on events (<strong>Events</strong>)</li>
	<li>retrieving content asynchronously (<strong>AJAX</strong>)</li>
</ol>

In most cases you need to complete several tasks at the same time. Think of an example, where once you click a button (Events) you retrieve a filter id using an AJAX call (AJAX) and you have to hide some elements accordingly or change their contents (Selecting, Manipulation).  

Considering mobile environments, we might recall some basic Javascript facts we just love to ignore when we're developing on a desktop, but which are essential on mobile browsers:

<ul>
	<li>DOM Manipulation costs, no matter how small this manipulation might be.</li>
	<li>Javascript still is a script language (hence the name) and will not be executed in a compiled form. So every line of code you are going to use will be executed and interpreted. This also includes some pitfalls, as more lines doesn't necessarily mean more execution time. A more complex basic operation can cost more than an easy operation splitted up. Take this <a href="http://jsperf.com/demo-ddprrt" target="_blank">jsPerf</a> as an example. We're talking peanuts here, tough.</li>
	<li>For mobile browsers: Javascript is SLOW! And with slow I mean it's horrific. I long considered the Mobile Safari 5.1 on the iPad 2 being the fastest Javascript Engine on mobile devices (newer apple products might be even faster). But still, my Chrome on a 2011 Macbook Pro can do eight times the operations compared to my 2011 iPads. And I haven't even talked about less sophisticated browsers like those native webkit browsers on Android 2.x phones</li>
</ul>

<h2>How those habits suck</h2>

With this in mind, I'd like to show you a somewhat abbreviated example of a real world application, developed before those smartphones were even considered for browsing the web. We got a call from a customer who said that his product filter didn't work quite well on the iPad, since the filter checkboxes were overall slow and didn't respond to our fingers. We spent quite some time on talking a look on the checkboxes before even thinking of looking at the operation behind. This was (in some way) the original code:

<pre><code class="language-javascript">
$('input.checkbox').click(function(e) {
  e.preventDefault();
  var code = $(this).val();
  $('.elements').each(function() {
    if($(this).attr('codes').indexOf(code) >= 0) {
      $(this).hide();
    }
  });
});
</code></pre>

The real example was somewhat more complex, but this here is sufficient to show what's the deal: You click on a checkbox (Event), and run through all elements checking if the selected code is in a code-list (which is done in a rather bad way by not using the HTML5 data-attributes, but hey, this happened 2008 or 2009), and if so, hide it (Manipulation). Yeah, even if you cache the element, this was still slow on the iPad using jQuery 1.4.

First we made our usual performance optimisations: Caching objects, dropping the each-Method and using a for-loop instead, and so on. Still sucked. What we realised after taking a deeper look into all those functions: the real bottleneck was hiding the elements with jQueries hide method. With <code class="language-javascript">.hide()</code> you have the ability to do a hiding animation as well, and with older jQuery versions this animation was still standard. But even if we set the duration to zero, the hiding method was the breaker for the performance on the iPad. 

Why? Because it changed 200 elements in our tree synchronously and by adding different style attributes over time. Changing this to a special <code class="language-css">.hidden { display: none; }</code> class did the same job alot faster. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2012-11-21 23:23:18</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Foto 22.11.12 18 39 45</title>
		<link>https://fettblog.eu/blog/2012/11/26/technologieplauscherl-at-netural/foto-22-11-12-18-39-45/</link>
		<pubDate>Mon, 26 Nov 2012 13:30:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2012/11/Foto-22.11.12-18-39-45.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2012-11-26 15:30:00</wp:post_date>
		<wp:post_date_gmt>2012-11-26 13:30:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>foto-22-11-12-18-39-45</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>84</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2012/11/Foto-22.11.12-18-39-45.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/11/Foto-22.11.12-18-39-45.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Test</title>
		<link>https://fettblog.eu/?page_id=98</link>
		<pubDate>Thu, 06 Dec 2012 14:15:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?page_id=98</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
<li>Pseudoelemente
** CSS Pfeile</li>
<li>Geschwisterselektoren
** Wenn :first-child keine Option ist
** Rating Widget
** Inhalte selektieren mit CSS3 Pseudoklassen</li>
<li>Attributselektoren</li>
</ul>

<h2>CSS-only Tooltip</h2>

<p>Um das neue Wissen der Attributselektoren bereichert, können wir diese gleich in einem sehr hilfreichen Beispiel anwenden. Besonders beliebt sind seit einiger Zeit so genannte Tooltips: Kleine Sprechblasen, die bei Mouseover an bestimmten Elementen erscheinen und Zusatzinformationen angeben. Zum Beispiel eine Erklärung zu Abkürzungen oder sonstige, weiterführende Informationen.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2012-12-06 16:15:01</wp:post_date>
		<wp:post_date_gmt>2012-12-06 14:15:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>57</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Forecast.io</title>
		<link>https://fettblog.eu/blog/2013/04/24/nobody-wants-html5-apps/foto-24-04-13-20-52-57/</link>
		<pubDate>Wed, 24 Apr 2013 19:24:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-52-57.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2013-04-24 21:24:25</wp:post_date>
		<wp:post_date_gmt>2013-04-24 19:24:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>foto-24-04-13-20-52-57</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>120</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-52-57.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/Foto-24.04.13-20-52-57.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:960;s:4:"file";s:34:"2013/04/Foto-24.04.13-20-52-57.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-52-57-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-52-57-200x300.png";s:5:"width";i:200;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-52-57-624x936.png";s:5:"width";i:624;s:6:"height";i:936;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Forecast.io</title>
		<link>https://fettblog.eu/blog/2013/04/24/nobody-wants-html5-apps/foto-24-04-13-20-53-46/</link>
		<pubDate>Wed, 24 Apr 2013 19:24:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-53-46.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2013-04-24 21:24:27</wp:post_date>
		<wp:post_date_gmt>2013-04-24 19:24:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>foto-24-04-13-20-53-46</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>120</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-53-46.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/Foto-24.04.13-20-53-46.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:960;s:4:"file";s:34:"2013/04/Foto-24.04.13-20-53-46.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-53-46-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-53-46-200x300.png";s:5:"width";i:200;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-53-46-624x936.png";s:5:"width";i:624;s:6:"height";i:936;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ExtFM, based on PhoneGap</title>
		<link>https://fettblog.eu/blog/2013/04/24/nobody-wants-html5-apps/foto-24-04-13-20-54-34/</link>
		<pubDate>Wed, 24 Apr 2013 19:24:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-54-34.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2013-04-24 21:24:32</wp:post_date>
		<wp:post_date_gmt>2013-04-24 19:24:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>foto-24-04-13-20-54-34</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>120</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-54-34.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/Foto-24.04.13-20-54-34.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:960;s:4:"file";s:34:"2013/04/Foto-24.04.13-20-54-34.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-54-34-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-54-34-200x300.png";s:5:"width";i:200;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"Foto-24.04.13-20-54-34-624x936.png";s:5:"width";i:624;s:6:"height";i:936;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Brugger Comment Palace</title>
		<link>https://fettblog.eu/brugger-comment-palace/</link>
		<pubDate>Mon, 06 May 2013 14:41:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?page_id=152</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is a place to appreciate and worship the great lyrical greatness of the talented comment writer Brugger.</p>

<h1>Update September 2013</h1>

<p>Finished a project, this is what we found:</p>

<h2>In a nutshell</h2>

<pre><code class="language-javascript">
//TODO:

// !!!!!!!!!!!!!!!!!!!!!
//
// http://i.qkme.me/3sfaks.jpg
//
// !!!!!!!!!!!!!!!!!!!!!
</code></pre>

<h2>The long story</h2>

<p>First</p>

<pre><code class="language-javascript">
/*TODO: Check if this else is actually 
  needed, becaue I really don't think so
*/
</code></pre>

<p>Second</p>

<pre><code class="language-javascript">
/*TODO: Check if this is unnecessary too, 
  am I going crazy here, what the hell?
*/
</code></pre>

<p>Third</p>

<pre><code class="language-javascript">
/*what?!?! WHY? this gets all checked like.... 
  20 lines above this block? JESUS, CHECK THIS TOO
*/
</code></pre>

<p>Le grande finale</p>

<pre><code class="language-javascript">
/*TODO: MAKE THIS PRETTY, DAMMIT, PLEASE. 
  holy hell this is a ugly, unmaintainable piece 
  of ... i don't even know
*/
</code></pre>

<h1>Ye olde comments</h1>

<h2>At least he warns us...</h2>

<pre><code class="language-javascript">/*
WARNING FOR THE FAINT-HEARTED
HORRIBLE, HORRIBLE CODE BEYOND THIS POINT
PROCEED WITH CAUTION AND AT OWN RISK
*/
</code></pre>

<p>It was not THAT bad... well, not in the first half.</p>

<h2>Hint: He didn't</h2>

<pre><code class="language-javascript">/*
I guess I should really comment this one
well, when it's done

TODO: comment this properly... I'm serious!
*/
</code></pre>

<h2>Show all the things!</h2>

<pre><code class="language-javascript">if(...){
  // SHOW ALL THE THINGS!!
}else{
  // SHOW ALL THE THINGS, that belong to a page... meeeeeh
}
</code></pre>

<h2>Carousels You now carousel sliders? Almost every webpage nowadays has one of those...</h2>

<pre><code class="language-javascript">/* 
Here I am standing on my own
Not a motion from the telephone
I know not a reason why
Solitudes a reason to die

Just you wait and see
As school life is a
It is a woken dream
Aren't you feeling alone?

I guess its just another
I guess its just another
I guess its just another night alone

Blink 182 - CAROUSEL

get it, GET IT?!?

no? i... uhhm.... wasn't that a clever... really? no? hmm
okay, well, on to the codez then i guess.....    ;_; 
*/

var carouselElements = $('.carousel-wrapper');
carouselElements.each(function(){
    ...
});

//btw, this is not a proper way to comment your code,  kids, be advised, i warned you
</code></pre>

<h2>A strange case ... Not only sherlock holmes has a take on strange cases.</h2>

<pre><code class="language-javascript">function loadData(idx, cb){
  options.globalCallback = cb;
  if(idx === 3){
    // I DO NOT KNOW WHAT THE FRACK TO LOAD HERE, PPLZ
    dataLoaded(3);
  }else if(!options.dict){
    ...
  }
}
</code></pre>

<p>And later...</p>

<pre><code class="language-javascript">function dataLoaded(idx){
  filterData(idx, function(data){
    switch(idx){
    case 0:
           ...
    break;
    case 1:
           ...
        break;
        case 2:
           ...
        break;
        case 3:
           //not too sure what happens here
           //TODO -> do something when time-stuff gets clickied
        break;
    default:
           //yeah, there is no default case, take THAT
    break;
    }
  });
}
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2013-05-06 16:41:29</wp:post_date>
		<wp:post_date_gmt>2013-05-06 14:41:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brugger-comment-palace</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>About</title>
		<link>https://fettblog.eu/contact/</link>
		<pubDate>Mon, 03 Jun 2013 10:16:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?page_id=171</guid>
		<description></description>
		<content:encoded><![CDATA[I'm Stefan Baumgartner, I'm a web developer/web lover based in Linz, Austria. I'm the head of the frontend development team at <a href="http://www.netural.com">Netural</a>. Recently I became co-host at the German <a href="http://www.workingdraft.de">Workingdraft</a> podcast.

<p class="img-holder"><a href="https://fettblog.eu/wp-content/uploads/2013/06/Foto-02.05.12-10-54-33.jpg"><img src="https://fettblog.eu/wp-content/uploads/2013/06/Foto-02.05.12-10-54-33-220x300.jpg" alt="@ddprrt" width="220" height="300" class="alignnone size-medium wp-image-221" /></a></p>

<h2>ddprrt? What the ...?</h2>

My Twitter/Github/Whatever handle is "ddprrt", which is very, very short for "dead parrot". This might explain the logo to the upper right, but if you don't know what dead parrot is all about, check out <a href="http://www.youtube.com/watch?v=4vuW6tQ0218">this video on YouTube</a>. Yeah, it's all about Monty Python! 

<h2>Contact</h2>

If you want to get in touch with me, just shoot an <a href="mailto:sbaumg@gmail.com">E-Mail</a>, or just shoot a <a href="http://twitter.com/ddprrt">tweet</a>. I'm happy to answer to any issue as soon as I can!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date>2013-06-03 12:16:27</wp:post_date>
		<wp:post_date_gmt>2013-06-03 10:16:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contact</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Bildschirmfoto 2013-06-04 um 16.07.15</title>
		<link>https://fettblog.eu/?attachment_id=197</link>
		<pubDate>Tue, 04 Jun 2013 14:20:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/06/Bildschirmfoto-2013-06-04-um-16.07.15.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date>2013-06-04 16:20:51</wp:post_date>
		<wp:post_date_gmt>2013-06-04 14:20:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bildschirmfoto-2013-06-04-um-16-07-15</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/06/Bildschirmfoto-2013-06-04-um-16.07.15.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/Bildschirmfoto-2013-06-04-um-16.07.15.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1166;s:6:"height";i:948;s:4:"file";s:49:"2013/06/Bildschirmfoto-2013-06-04-um-16.07.15.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:49:"Bildschirmfoto-2013-06-04-um-16.07.15-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:49:"Bildschirmfoto-2013-06-04-um-16.07.15-300x243.png";s:5:"width";i:300;s:6:"height";i:243;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:50:"Bildschirmfoto-2013-06-04-um-16.07.15-1024x832.png";s:5:"width";i:1024;s:6:"height";i:832;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:49:"Bildschirmfoto-2013-06-04-um-16.07.15-624x507.png";s:5:"width";i:624;s:6:"height";i:507;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Foto 03.06.13 11 58 13</title>
		<link>https://fettblog.eu/?attachment_id=198</link>
		<pubDate>Tue, 04 Jun 2013 14:21:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/06/Foto-03.06.13-11-58-13.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2013-06-04 16:21:01</wp:post_date>
		<wp:post_date_gmt>2013-06-04 14:21:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>foto-03-06-13-11-58-13</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/06/Foto-03.06.13-11-58-13.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/Foto-03.06.13-11-58-13.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:640;s:6:"height";i:960;s:4:"file";s:34:"2013/06/Foto-03.06.13-11-58-13.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"Foto-03.06.13-11-58-13-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"Foto-03.06.13-11-58-13-200x300.png";s:5:"width";i:200;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"Foto-03.06.13-11-58-13-624x936.png";s:5:"width";i:624;s:6:"height";i:936;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>beyond1</title>
		<link>https://fettblog.eu/blog/2013/06/06/beyond-our-own-noses-the-beyond-tellerrand-2013/beyond1/</link>
		<pubDate>Thu, 06 Jun 2013 11:31:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/06/beyond1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2013-06-06 13:31:42</wp:post_date>
		<wp:post_date_gmt>2013-06-06 11:31:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beyond1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>208</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/06/beyond1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/beyond1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:534;s:4:"file";s:19:"2013/06/beyond1.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"beyond1-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:19:"beyond1-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"beyond1-624x416.jpg";s:5:"width";i:624;s:6:"height";i:416;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>beyond2kate</title>
		<link>https://fettblog.eu/blog/2013/06/06/beyond-our-own-noses-the-beyond-tellerrand-2013/beyond2kate/</link>
		<pubDate>Thu, 06 Jun 2013 11:31:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/06/beyond2kate.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2013-06-06 13:31:44</wp:post_date>
		<wp:post_date_gmt>2013-06-06 11:31:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beyond2kate</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>208</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/06/beyond2kate.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/beyond2kate.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:534;s:4:"file";s:23:"2013/06/beyond2kate.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"beyond2kate-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"beyond2kate-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"beyond2kate-624x416.jpg";s:5:"width";i:624;s:6:"height";i:416;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>beyond3josh</title>
		<link>https://fettblog.eu/blog/2013/06/06/beyond-our-own-noses-the-beyond-tellerrand-2013/beyond3josh/</link>
		<pubDate>Thu, 06 Jun 2013 11:31:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/06/beyond3josh.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date>2013-06-06 13:31:45</wp:post_date>
		<wp:post_date_gmt>2013-06-06 11:31:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beyond3josh</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>208</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/06/beyond3josh.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/beyond3josh.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:534;s:4:"file";s:23:"2013/06/beyond3josh.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"beyond3josh-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"beyond3josh-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"beyond3josh-624x416.jpg";s:5:"width";i:624;s:6:"height";i:416;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>beyond4james</title>
		<link>https://fettblog.eu/blog/2013/06/06/beyond-our-own-noses-the-beyond-tellerrand-2013/beyond4james/</link>
		<pubDate>Thu, 06 Jun 2013 11:31:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/06/beyond4james.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2013-06-06 13:31:46</wp:post_date>
		<wp:post_date_gmt>2013-06-06 11:31:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beyond4james</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>208</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/06/beyond4james.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/beyond4james.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:534;s:4:"file";s:24:"2013/06/beyond4james.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"beyond4james-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:24:"beyond4james-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"beyond4james-624x416.jpg";s:5:"width";i:624;s:6:"height";i:416;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>@ddprrt</title>
		<link>https://fettblog.eu/contact/foto-02-05-12-10-54-33/</link>
		<pubDate>Fri, 07 Jun 2013 10:09:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/06/Foto-02.05.12-10-54-33.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date>2013-06-07 12:09:35</wp:post_date>
		<wp:post_date_gmt>2013-06-07 10:09:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>foto-02-05-12-10-54-33</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>171</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/06/Foto-02.05.12-10-54-33.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/Foto-02.05.12-10-54-33.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:818;s:4:"file";s:34:"2013/06/Foto-02.05.12-10-54-33.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"Foto-02.05.12-10-54-33-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"Foto-02.05.12-10-54-33-220x300.jpg";s:5:"width";i:220;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";d:6.29999999999999982236431605997495353221893310546875;s:6:"credit";s:0:"";s:6:"camera";s:13:"Canon EOS 50D";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1335956073;s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"25";s:3:"iso";s:3:"100";s:13:"shutter_speed";s:4:"0.01";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>bat63</title>
		<link>https://fettblog.eu/blog/2013/07/16/basic-svg-path-tweening-with-smil/bat63/</link>
		<pubDate>Mon, 15 Jul 2013 11:37:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/07/bat63.svg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>352</wp:post_id>
		<wp:post_date>2013-07-15 13:37:10</wp:post_date>
		<wp:post_date_gmt>2013-07-15 11:37:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bat63</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>264</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/07/bat63.svg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/bat63.svg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>thomas</title>
		<link>https://fettblog.eu/blog/2013/10/10/digital-visions-2013/thomas/</link>
		<pubDate>Thu, 10 Oct 2013 09:39:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/10/thomas.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>460</wp:post_id>
		<wp:post_date>2013-10-10 11:39:31</wp:post_date>
		<wp:post_date_gmt>2013-10-10 09:39:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thomas</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>454</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/10/thomas.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/10/thomas.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:720;s:6:"height";i:478;s:4:"file";s:18:"2013/10/thomas.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"thomas-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"thomas-300x199.jpg";s:5:"width";i:300;s:6:"height";i:199;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"thomas-624x414.jpg";s:5:"width";i:624;s:6:"height";i:414;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>mespeaking</title>
		<link>https://fettblog.eu/blog/2013/10/10/digital-visions-2013/mespeaking/</link>
		<pubDate>Thu, 10 Oct 2013 09:40:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/10/mespeaking.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>463</wp:post_id>
		<wp:post_date>2013-10-10 11:40:20</wp:post_date>
		<wp:post_date_gmt>2013-10-10 09:40:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mespeaking</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>454</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/10/mespeaking.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/10/mespeaking.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2048;s:6:"height";i:1363;s:4:"file";s:22:"2013/10/mespeaking.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"mespeaking-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:22:"mespeaking-300x199.jpg";s:5:"width";i:300;s:6:"height";i:199;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:23:"mespeaking-1024x681.jpg";s:5:"width";i:1024;s:6:"height";i:681;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"mespeaking-624x415.jpg";s:5:"width";i:624;s:6:"height";i:415;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>crowd</title>
		<link>https://fettblog.eu/blog/2013/10/10/digital-visions-2013/crowd/</link>
		<pubDate>Thu, 10 Oct 2013 09:43:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/wp-content/uploads/2013/10/crowd.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2013-10-10 11:43:17</wp:post_date>
		<wp:post_date_gmt>2013-10-10 09:43:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>crowd</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>454</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://fettblog.eu/wp-content/uploads/2013/10/crowd.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/10/crowd.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2048;s:6:"height";i:1363;s:4:"file";s:17:"2013/10/crowd.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"crowd-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:17:"crowd-300x199.jpg";s:5:"width";i:300;s:6:"height";i:199;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:18:"crowd-1024x681.jpg";s:5:"width";i:1024;s:6:"height";i:681;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"crowd-624x415.jpg";s:5:"width";i:624;s:6:"height";i:415;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>HTML5 Audio on mobile devices</title>
		<link>https://fettblog.eu/blog/2012/04/08/html5-audio-on-mobile-devices/</link>
		<pubDate>Sun, 08 Apr 2012 20:05:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[ <p>HTML5 Audio on desktop browsers is a mess. But you haven't experienced true pain and suffering until you try to get HTML5 audio done on mobile devices. This article is a follow-up to <a href="https://fettblog.eu/slides/HTML5Mobile">my talk at the Barcamp in Salzburg</a> in March and was inspired by <a href="https://twitter.com/#!/codepo8/status/187790267464679424">Chris Heilmans tweets</a> on that topic a few days ago.</p>
  <p>
First of all: We all know <a href="http://www.modernizr.org/">Modernizr</a>, we all use it and we all love it. With Modernizr we made a huge step away from applying features by browser detection towards feature detection. This is not only the recommended way of building websites and web-apps, but even more a mindset or way of thinking: Ask your browser what he can do (do a <strong>test</strong>), and you know what you <strong>can use</strong>, absolutely independent of browser vendors and versions.
</p>
<!--more-->
<p>
For such a complex feature like HTML5 Audio, it's great that with <a href="http://areweplayingyet.org/">areweplayingyet</a> there is a community out there which supplies such tests for HTML5 Audio subfeatures, API calls and best practices like hot swapping audio sources.
</p>

<p>
If you run through some tests and view the browser compatibilty list, you will see that many tests fail on mobile browsers like early Android implementations and especially on iOS devices. But why? Is HTML5 Audio compatibility really that bad on iPad and iPhone, especially when it's the only way to include sound?
</p>

<p>
Well. Yes and no. HTML5 Audio is pretty f***ed up on iOS too, but it works. And if you know the rules, you know why all tests fail and how you can deal with that.
</p>

<h2>#1 - One does not simply play sound on JS event</h2>

<p>
The most important rule of all: Do not think that you just can play sound by using JS events, like you're used to when working with Desktop browsers. Each sound playing requires a user interaction, his "OK" or his "Go for it" by touching an element on your page. This can be the built-in Audio player controls (which seem to be not compliant to Apples user interface standards by being flipping small), or any click or touch eventhandler bound to your elements. Once an interaction is done, the file is downloaded to your device. After that, you can do all the cool audio things you want to do.
</p>

<p>
But why do you need user interaction to play audio (and video)? Isn't that unusual? Might be, but imagine yourself with your iPhone in a foreign country, having limited bandwidth, trying to reach your favourite  website which just came up with some nifty 10MB background song not only trying to ruin your nerves, but also adding some more bucks on your phone bill for next month. User interaction seems legit now.
</p>

<p>
Possible solution for that: Have a splash screen in your app, that the user has to remove, and that triggers the download of your soundfile. Quirky and awful, but so far the only way at the moment.
</p>

<h2>#2 - There can be only one!</h2>

<p>
Classy old Immortal rule: You can't play more than one sound file at once. So no background music and laser buzzes in your star shooter. Personally I'm okay with that. But how about making use of that? Think of "There should be only one!". Enter sound sprites.</p>

<p>Image sprites are well known: Having one image with all icons and stuff, and accessing them by putting the right background-position in your CSS file. Sound sprites work similar: Put all sound you want to play in one audio file, and define start and ending indices. Now the workflow is as follows:</p>

<ul>
<li>User removes splash screen, downloads file</li>
<li>A few seconds of silence are played, right at the start and right after interaction</li>
<li>After that, we should have direct access to all positions in the whole file. Just jump to your positions as you like</li>
</ul>

<p>Below is some sprite demo I came up with in my talk, but also take a look at <a href="http://thewebrocks.com/demos/audiosprite/">Chris' more sophisticated solution</a>.</p>

<pre class="prettyprint"><code class="language-markup">&lt;audio src="sprite.mp3" controls="none" id="myaudio" /&gt;</code>
</pre>

<pre class="prettyprint"><code class="language-javascript">var maudio = document.getElementById('myaudio');

var soundSprite = [
  {start: 0, end: 3000},
  {start: 3500, end: 6789}             
];

element.addEventListener('touchstart', function(ev) {
  maudio.play();
  playSoundFile(0);
})

function playSoundFile(idx) {
  maudio.currentPosition = soundSprite[idx].start;
  var x = setInterval(function() {
    if(maudio.currentPosition &gt;= soundSprite[idx].end) {
      maudio.pause(); // There is no stop() in HTML5
      clearInterval(x);
    }
  }, 50);
}</code>
</pre>

<p>Soundsprites are pretty common now, and well supported by libraries like <a href="http://www.schillmania.com/projects/soundmanager2/">SoundManager2</a>.</p>

<p>Think back to Modernizr: We now know that iOS devices support HTML5 Audio, we know that we can do a lot with that even if the tests fail. Can you adapt your tests? Is it okay to have the user interact with your app before testing? Is it okay to download test files? Or do you just go back to user agent sniffing to wrap up your target platforms?</p>

<h2>Internet Explorer 9 Mobile</h2>

<p>The things learned above apply to most mobile Webkit implementations, but we have to deal with another browser as well: IE9 on mobile devices</p>

<p>IE9 doesn't support a lot HTML5/CSS3 features, but the features that it supports are usually really well implemented and robust. Same goes for HTML5 Audio, which also has been stated by the developers of <a href="http://cuttherope.ie/">Cut the rope</a> in a <a href="http://nerdplusart.com/why-is-there-flash-in-the-html5-version-of-cut-the-rope">blog post</a> some months ago.</p>

<p>Same goes for the mobile version of Internet Explorer 9. And usually, you can expect everything that works in IE9 will also work in IE9 mobile. Same goes for sound, we even don't have to wait for user interaction when playing and downloading files! Although I don't know if that's a good thing or a bad one.</p>

<p>However, there's one thing that doesn't work on IE9 Mobile, and that is changing your sound "position"  when playing, so sound sprites won't work there. Now imagine a web-app exclusively covering IE9 mobile and iOS, I wonder how tests are going to look like there, or if you just go back to user agent sniffing.</p>

<p>Bottom line: HTML5 Audio is a wreck at the moment, and don't get fooled by "support". Just because your devices supports a certain feature does not mean that it's usable in the way you are used to.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2012-04-08 22:05:43</wp:post_date>
		<wp:post_date_gmt>2012-04-08 20:05:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html5-audio-on-mobile-devices</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="audio"><![CDATA[Audio]]></category>
		<category domain="category" nicename="browser"><![CDATA[Browser]]></category>
		<category domain="post_tag" nicename="feature-sniffing"><![CDATA[feature sniffing]]></category>
		<category domain="post_tag" nicename="fuuuuu"><![CDATA[Fuuuuu]]></category>
		<category domain="category" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="windows-phone"><![CDATA[Windows Phone]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Of mice and touches | front-end technology talk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://fettblog.eu/blog/2012/05/01/of-mice-and-touches/</wp:comment_author_url>
			<wp:comment_author_IP>81.19.145.238</wp:comment_author_IP>
			<wp:comment_date>2012-11-15 22:25:13</wp:comment_date>
			<wp:comment_date_gmt>2012-11-15 20:25:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Streaming audio. And that leads us to this issue we had to face once [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Remake, Remodel.</title>
		<link>https://fettblog.eu/blog/2012/11/15/remake-remodel/</link>
		<pubDate>Thu, 15 Nov 2012 20:08:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[Let's face it: ModX -- even with the Articles Plugin -- isn't suitable for fast blogging. At least not in the way I need it. So I switched back to Wordpress. Setting the whole thing up from scratch. So there will be some changes in the next days/weeks/months.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2012-11-15 22:08:48</wp:post_date>
		<wp:post_date_gmt>2012-11-15 20:08:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>remake-remodel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cms"><![CDATA[CMS]]></category>
		<category domain="post_tag" nicename="ddprrt"><![CDATA[ddprrt]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="modx"><![CDATA[ModX]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Robust (but hacky) way of portrait / land&#173;scape detection</title>
		<link>https://fettblog.eu/blog/2012/04/16/robust-but-hacky-way-of-portraitlandscape-detection/</link>
		<pubDate>Mon, 16 Apr 2012 20:18:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[<p>On mobile devices it's pretty easy (and in some cases also pretty cool) to change the look of your website respectively to the orientation of your device with media queries. However, sometimes the orientation does not only affect your layout, but also the routines of your Javascript. This article shows some possibilites how to detect portrait/landscape orientation on your mobile device. Some are less robust considering multiple device vendors, and some are in exchange a lot more hacky. You're gonna love it.</p>
  <p>When searching for portrait/landscape orientation detection we mostly get the following, well known results on Stackoverflow and consorts:</p>
<!--more-->
<pre class="prettyprint"><code class="language-javascript">window.onorientationchange = function() {
  switch(window.orientation) {
    case 0:
      //do portrait stuff
      break;
    case 90:
      //do landscape stuff
      break;
    case -90:
      //do landscape stuff
      break;
    case 180:
      //do portrait stuff upside-down
      break;
  }
}</code>
</pre>
<p>Pretty easy to understand: When the device changes it's orientation, check the degrees of your device, and in case of 0 or 180 degrees it's portrait mode, landscape mode otherwise. This is true for almost all mobile phones out there and was heavily popularized by Apple and it's <a target="_blank" href="https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html">Mobile Safari Web Development Documentation</a>.</p>

<h2>Samsung Galaxy Tab 10.1 and consorts</h2>

<p>
The new Samsung Galaxy Tab (and some other devices like Toshiba Thrive) however, do things a little different: Here <code>window.orientation</code> results in 0 degrees respectively 180 degrees in <strong>landscape</strong> mode.
</p>
<p>And acutally, that's okay. That's how the Galaxy Tab should be held by the users. That's it's zero degree orientation by definition. It's just a pain in the ass for us developers.</p>

<h2>matchMedia for media queries in Javascript</h2>

Media queries are cool for device detection because they're really checking for portrait and landscape orientation, not for the devices degree orientation. And there is actually a way to use media queries in Javascript. Credits to the code snipplet go to <a target="_blank" href="http://davidwalsh.name/orientation-change">David Walsh</a>. 

<pre class="prettyprint"><code class="language-javascript">var mql = window.matchMedia("(orientation: portrait)");

// If there are matches, we're in portrait
if(mql.matches) {  
  // Portrait orientation
} else {  
  // Landscape orientation
}

// Add a media query change listener
mql.addListener(function(m) {
  if(m.matches) {
    // Changed to portrait
  }
  else {
    // Changed to landscape
  }
});</code>
</pre>
<p>However, <code>window.matchMedia</code> is not support prior to iOS5 and Android 2.3. </p>

<h2>Hacky Media Query solution</h2>

<p>But there's another way to bring media queries to your Javascript for this use case. By its roots, the CSS file:</p>

<pre class="prettyprint"><code class="language-css">body:after {
  content: "";
  position: absolute;
  color: transparent;
}

@media all and (orientation: portrait) {
  body:after {
    content: "p";
  }
}

@media all and (orientation: landscape) {
  body:after {
    content: "l";
  }
}</code>
</pre>

<p>We create a <code>body:after</code> pseudo element (because it's always here and doesn't require an extra DOM element) which is placed absolutely (so it doesn't take any space) and has a transparent color (so we don't see its contents). According to our orientation, we change the element's content to respectively.</p>

<p>And this is our Javascript:</p>

<pre class="prettyprint"><code class="language-javascript">//get style of the body:after element
var bodyAfterStyle = window.getComputedStyle(
  document.body, ":after");

window.onorientationchange = function() {
  if(bodyAfterStyle.content == 'p') {
    //do portrait stuff
  } else if(bodyAfterStyle.content == 'l') {
    //do landscape stuff
  }
}</code>
</pre>

<p>Pretty self explanatory. I know that there're other ways, like calculating with the device window width and height, but there might be some issues because the windows width is defined by its content. So I think it's better to stick with one of the solutions above.</p>

<p><strong>Bottom line:</strong>
Know your devices and if possible, use <code>window.matchMedia</code> for your orientation detection.
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2012-04-16 22:18:05</wp:post_date>
		<wp:post_date_gmt>2012-04-16 20:18:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>robust-but-hacky-way-of-portraitlandscape-detection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="feature-sniffing"><![CDATA[feature sniffing]]></category>
		<category domain="category" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="javascript-2"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="media-queries"><![CDATA[media queries]]></category>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="orientation"><![CDATA[orientation]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[fz]]></wp:comment_author>
			<wp:comment_author_email>edotesi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.88.196.245</wp:comment_author_IP>
			<wp:comment_date>2012-12-17 13:25:43</wp:comment_date>
			<wp:comment_date_gmt>2012-12-17 11:25:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[best article I've found on this issue, thank you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355743543.8959";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1355744198.3513";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[ddprrt]]></wp:comment_author>
			<wp:comment_author_email>sbaumg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.99.210.9</wp:comment_author_IP>
			<wp:comment_date>2012-12-18 12:15:30</wp:comment_date>
			<wp:comment_date_gmt>2012-12-18 10:15:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank's a lot!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1355825730.8224639892578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Of mice and touches</title>
		<link>https://fettblog.eu/blog/2012/05/01/ie9-mobile-is-no-touch-browser/</link>
		<pubDate>Tue, 01 May 2012 20:21:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Unbelievable, but true: Imagine you bought a new Windows Phone 7 (e.g. Nokia Lumia or Samsung Omnia) with "Mango" on it and try to get your mobile web app running, you will be really surprised when finding out, that there's no touch event available.</p>
  <p>
"But that's what i do", you will say, "I touch my shiny phone all the time!". And you are right with that, nonetheless, IE9 mobile does not register <code>touchstart</code>, <code>touchend</code> or <code>touchmove</code>. Instead of those well known events, IE9 thinks of your finger as a mouse.
</p>
<!--more-->
<p>
Usually, when developing for mobile web apps, you will have some code like this in your JS:</p>

<pre class="prettyprint language-javascript"><code class=" language-javascript">var clickevent = (ontouchstart in window) ? 'touchstart' : 'click';</code>
</pre>

<p>And add event listeners using that variable.</p>

<pre class="prettyprint language-javascript"><code class=" language-javascript">
elem.addEventListener(clickevent, function(e) {
  ...
});
</code>
</pre>

<h2>IE9 is no touch browser</h2>

<p>
That's good for developing your web app on the desktop as well as testing/using it on your mobile device. Even for IE9 Mobile, since all mobile browsers can handle <code>onclick</code>. But once you need gestures, you're going to need mouse events for deskop and IE9 Mobile.
</p>

<p>
Onfortunately, the touch event objects, while not that much different from mouse events in terms of properties, differ in one significant point: There can be more than one touch event at a time.
</p>

<p>A way of handling both mouse and touch events would be something like this, considering you allow just one touch at a time and don't need complex touch related stuff:</p>

<pre class="prettyprint language-javascript"><code class=" language-javascript">
elem.addEventListener('touchstart', function(ev) {
  myMethod(ev.changedTouches[0]);
});

elem.addEventListener('mousedown', myMethod);

function myMethod(ev) {
  //do something with ev.screenX and ev.screenY
}
</code>
</pre>

<p>Same for <code>touchend</code> --&gt; <code>mouseup</code> and <code>touchmove</code> --&gt; <code>mousemove</code>.</p>

<p>This also means: it is <strong>not possible to have multi-touch gestures in IE9 Mobile</strong></p>

<h2>Why does IE9 Mobile behave so different?</h2>

<p>There's one simple explanation: Microsoft tried to put the whole IE9 "experience" to mobile devices, so what you can expect from IE9 mobile is the same as from IE9 on desktops.</p>

<p>Well, that's not entirely true. There are some more differences:</p>

<p>What's in IE9 mobile that's missing from the desktop version</p>
<ul>
<li>viewport meta-tag, well almost. The scale properties are not supported (which is a bummer)</li>
<li><code>-ms-text-size-adjust</code> is added as CSS property, works the same as <code>-webkit-text-size-adjust</code></li>
<li>GPS support for geocoding</li>
</ul>

<p>What you will miss in IE9 mobile</p>

<ul>
<li>Downloadable fonts. Font face is supported, but fonts aren't cached</li>
<li>Cross window communication</li>
<li>CMYK images (do we need that?)</li>
<li>Streaming audio. And that leads us to <a href="https://fettblog.eu/blog/2012/04/08/html5-audio-on-mobile-devices/">this issue we had to face once</a>
</li></ul>

<p>Actually, it's quite nice that the mobile version of this browser behaves <strong>almost</strong> the same as the desktop browser, which makes developing alot easier. On the other hand, I think a touch device, and thus a browser on a touch device, is much more different than your average desktop. So we also need a certain differency in behaviour! The features added by the touch event on mobile webkit browsers allow us much more flexibilty and possibilites for our web apps. Furthermore, it's just wrong to treat your finger as a mouse.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2012-05-01 22:21:43</wp:post_date>
		<wp:post_date_gmt>2012-05-01 20:21:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ie9-mobile-is-no-touch-browser</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="browser"><![CDATA[Browser]]></category>
		<category domain="post_tag" nicename="feature-sniffing"><![CDATA[feature sniffing]]></category>
		<category domain="post_tag" nicename="javascript-2"><![CDATA[javascript]]></category>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="windows-phone"><![CDATA[Windows Phone]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[of-mice-and-touches]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Forcing browsers to print all pages in grayscale</title>
		<link>https://fettblog.eu/blog/2012/06/11/forcing-chrome-to-print-all-pages-in-grayscale/</link>
		<pubDate>Mon, 11 Jun 2012 20:25:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Very short snipplet, but very effective.</p>
  <p>With Chrome 18 CSS3 filters are finally implemented and you can do amazing stuff with them. One thing we tried and which we found rather useful than fancy is to force Chrome printing all content on your website in grayscale.</p>
<!--more-->
<p>And this is the code:</p>

<pre class="prettyprint language-css"><code class=" language-css">@media print {
  body {
    -webkit-filter: grayscale(100%);
       -moz-filter: grayscale(100%); /* Does not work atm */
        -ms-filter: grayscale(100%); /* Does not work atm */
         -o-filter: grayscale(100%); /* Does not work atm */
    filter: grayscale(100%); /* future-proof */
  }
}
</code>
</pre>

<p>And that's it!</p>

<h2>Update</h2>

<p>And for the record, here is the full flegded version covering all major browsers:</p>

<pre class="prettyprint language-css"><code class=" language-css">
@media print {
  body {
    /* IE4-8 and 9 (deprecated). Thanks Travis for the tip! */
    filter: Gray();
    /* SVG version for IE10, Chrome 17, FF3.5, 
       Safari 5.2 and Opera 11.6 -- does not 
       need to be prefixed. See below */
    filter: url('#grayscale'); 
    /* CSS3 filter, at the moment Webkit only. Prefix it for
       future implementations */
    -webkit-filter: grayscale(100%); 
    filter: grayscale(100%); /* future-proof */
  }
}
</code>
</pre>

And here's the SVG Markup for the grayscale filter:

<pre class="prettyprint"><code class="language-markup">
&lt;svg xmlns="http://www.w3.org/2000/svg"&gt;
 &lt;filter id="grayscale"&gt;
  &lt;feColorMatrix type="matrix" values="0.3333 0.3333 0.3333 0 0 
                                       0.3333 0.3333 0.3333 0 0 
                                       0.3333 0.3333 0.3333 0 0 
                                       0 0 0 1 0"/&gt;
 &lt;/filter&gt;
&lt;/svg&gt;</code>
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2012-06-11 22:25:43</wp:post_date>
		<wp:post_date_gmt>2012-06-11 20:25:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>forcing-chrome-to-print-all-pages-in-grayscale</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="filter"><![CDATA[filter]]></category>
		<category domain="post_tag" nicename="media-queries"><![CDATA[media queries]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[forcing-browsers-to-print-all-pages-in-grayscale]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2250</wp:comment_id>
			<wp:comment_author><![CDATA[pyzy]]></wp:comment_author>
			<wp:comment_author_email>h@pyzy.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>222.128.176.180</wp:comment_author_IP>
			<wp:comment_date>2013-04-21 05:29:33</wp:comment_date>
			<wp:comment_date_gmt>2013-04-21 03:29:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[IE10 is invalid]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366830584.9658401012420654296875;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1366514973.84731006622314453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Preventing FOUT in IE9</title>
		<link>https://fettblog.eu/blog/2012/11/16/preventing-fout-on-ie9/</link>
		<pubDate>Fri, 16 Nov 2012 18:33:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[FOUT is an abbrevation for flash of unstyled text (or type) and is one of those really nasty bits in modern frontend development. Summarized it means that if you use webfonts it might happen that you first see your text displayed in a fallback font until the downloadble webfont is loaded, parsed and inserted. <a href="http://remysharp.com/2009/06/23/safaris-problem-with-font-face/" target="_blank">Remy Sharp</a> and <a href="http://paulirish.com/2009/fighting-the-font-face-fout/" target="_blank">Paul Irish</a> did a lot of research on that topic more than three years ago.

Luckily, with today's browsers you won't be seeing that so often as you might have been used to. The Webkit browsers as well as Firefox are really good in handling Webfonts, and even Internet Explorer, now in version 10, focusses heavily on webfont integration. However, IE10 just came out, and several people -- at least in bigger companies -- are just switching from ancient browsers to IE9...
<!--more-->
<h2>And IE9 FOUTs. Badly.</h2>

In one certain case, after considering server architecture and our clients desktop environment, and even after applying caching routines, this effect was so bad that it wasn't bearable at all. Put there is a certain way of handling this. First of all, we take a look at the currently recommended way of including webfonts for cross browser purposes:

<pre><code class="language-css">
@font-face {
    font-family: 'MySpecialFont';
    src: url('../fonts/MySpecialFont.eot'); /* IE9 compatibility mode */
    src: url('../fonts/MySpecialFont.eot?#iefix') format('embedded-opentype'), /* < IE9 */
         url('../fonts/MySpecialFont.woff') format('woff'), /* Modern browers */
         url('../fonts/MySpecialFont.ttf') format('truetype'), /* iOS, Android, Safari */
         url('../fonts/MySpecialFont.svg#MySpecialFont') format('svg'); /* Legacy iOS */
    font-weight: normal;
    font-style: normal;
}
</code></pre>

All modern browsers are capable of handling WOFF, so this should be your format of choice. EOT is more or less just for legacy purposes, and so is TrueType or SVG. So, if you are just reducing your Webfont declaration to the one you need for modern 
browsers, you end up with this.

<pre><code class="language-css">
@font-face {
    font-family: 'MySpecialFont';
    src: url('../fonts/MySpecialFont.woff');
    font-weight: normal;
    font-style: normal;
}
</code></pre>

Maybe you add a fallback for older mobile devices, which know how to handle the comma seperated syntax.


<pre><code class="language-css">
@font-face {
    font-family: 'MySpecialFont';
    src: url('../fonts/MySpecialFont.woff'), 
         url('../fonts/MySpecialFont.ttf'),
         url('../fonts/MySpecialFont.svg');
    font-weight: normal;
    font-style: normal;
}
</code></pre>

Now, the only browser with FOUT would be IE9 by today's standards. IE9 has the problem that he first loads the stylesheet and then loads the font. The time between those two loading processes can vary. However, if you happen to have the font right here after parsing through the whole stylesheet, you won't get a FOUT. We simply can achieve this by embedding the whole font as a data-URI:

<pre><code class="language-css">
@font-face {
    font-family: 'MySpecialFont';
    src: url("data:application/x-font-woff;base64,MUMBOJUMBO"),
         url('../fonts/MySpecialFont.ttf'),
         url('../fonts/MySpecialFont.svg');
    font-weight: normal;
    font-style: normal;
}
</code></pre>

Use a tool <a href="http://t.larskl.de/dataurl" target="_blank">like that one</a> for generating those embedded data streams. Now you need to support IE7 and IE8 extra, because IE9 might load the EOT file before checking on the embedded WOFF. We're doing this by creating another Stylesheet, soley for IE legacy purposes. With CSS preprocessors it's a quick thing to do.

<pre><code class="language-css">
@font-face {
    font-family: 'MySpecialFont';
    src: url('../fonts/MySpecialFont.eot');
    font-weight: normal;
    font-style: normal;
}
</code></pre>

Seperate those two files by including them in that way:


<pre><code class="language-markup">
&lt;!--[if lt IE 9]&gt;&lt;link rel="stylesheet" href="../static/css/styleie8.css"&gt;&lt;![endif]--&gt;
&lt;!--[if gt IE 8]&gt;&lt;!-->&lt;link rel="stylesheet" href="../static/css/style.css"&gt; &lt;!--&lt;![endif]--&gt;
</code></pre>

The seperating of those browser related stylesheets might not be the most elegant way, but it definitely works and using CSS preprocessors, you won't have that much work in generating those files.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2012-11-16 20:33:57</wp:post_date>
		<wp:post_date_gmt>2012-11-16 18:33:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preventing-fout-on-ie9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="post_tag" nicename="eot"><![CDATA[EOT]]></category>
		<category domain="post_tag" nicename="fout"><![CDATA[FOUT]]></category>
		<category domain="post_tag" nicename="ie9"><![CDATA[IE9]]></category>
		<category domain="post_tag" nicename="preprocessors"><![CDATA[preprocessors]]></category>
		<category domain="category" nicename="webfonts"><![CDATA[Webfonts]]></category>
		<category domain="post_tag" nicename="webfonts-2"><![CDATA[webfonts]]></category>
		<category domain="post_tag" nicename="woff"><![CDATA[WOFF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>&quot;Tech&#173;no&#173;logie&#173;plausch&#173;erl&quot; at Netural</title>
		<link>https://fettblog.eu/blog/2012/11/26/technologieplauscherl-at-netural/</link>
		<pubDate>Mon, 26 Nov 2012 13:31:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=84</guid>
		<description></description>
		<content:encoded><![CDATA[On Thursday we held the "<a href="http://www.barcamp.at/Technologieplauscherl" target="_blank">Technologieplauscherl</a>" at Netural for the first time. The "Plauscherl" (which translates to technology talk, but is unrelated to my beloved F.E.T.T.) is some sort of short evening barcamp held by the local dev community of Linz in different locations, mostly offices from attending persons. In its eight edition it had the unique topic "books", which was also a first for the group, I guess. The goal was: Present a book and give a short review.

In short, those were the books mentioned:

<ul>
	<li>Organizer and mastermind of the Plauscherl -- Phil Reither -- presented <a href="http://www.brainrules.net" target="_blank">Brain Rules</a>, showing techniques for keeping your brain functional and working</li>
	<li>Joachim Sauer showed <a href="http://www.schneier.com/book-lo.html" target="_blank">Liars and Outliers</a>, very philosophical but also very interesting book on security in your everyday live, from an evolutional point of view</li>
	<li><a href="http://dertompson.com" target="_blank">Thomas Einwaller</a> gave a short summary of "Release It!", which showed some best practices and experiences in releasing large scale enterprise software</li>
	<li>And I was showing <a href="http://www.smacss.com" target="_blank">SMACSS</a>. And if you're into CSS, you should definitely take a look into this topic</li>
</ul>

What I found interesting is that three of the four book presenters (including myself) were from the "Silbergrau area of 2006", which means we worked together in the past and seem to haven't changed much since back then ;-)

Last, but definitely not least <a href="http://www.raupes.net/" target="_blank">Bernhard Wurm</a> gave a very detailed introduction to <a href="http://www.typescriptlang.com" target="_blank">TypeScript</a>, Microsofts JavaScript superset which was -- at a first glance -- extraordinarily well designed and surprisingly open minded, with an open door towards the community and existing projects. More of a meaningful addition to your web development practices than a way of drawing attention. The support for OSX and Linux is very good and there're even Sublime Text plugins. Tough you only get the full scale experience by having the superb IntelliSense Addon for Visual Studio. If you give me some of those for Sublime (or Coda, but that will never happen), I'm really willing to try it past those examples.

What was even more interesting was the resulting discussion among the nerds. CoffeeScript was mentioned, as was Dart with lots and lots of examples and first-hand experiences. Which showed also the main reason of this little Get-Together in our steel town: Have a look across your border and see how others handle the same problems you might stumble upon. I'm happy to participate in the next round!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2012-11-26 15:31:06</wp:post_date>
		<wp:post_date_gmt>2012-11-26 13:31:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>technologieplauscherl-at-netural</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="barcamp"><![CDATA[Barcamp]]></category>
		<category domain="post_tag" nicename="barcamp"><![CDATA[Barcamp]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="ddprrt"><![CDATA[ddprrt]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="gettogether"><![CDATA[Gettogether]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="linz"><![CDATA[Linz]]></category>
		<category domain="post_tag" nicename="smacss"><![CDATA[SMACSS]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[TypeScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Top CSS preprocessor mistakes</title>
		<link>https://fettblog.eu/?p=92</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=92</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Wrong use of variables</h2>

Honestly, variables was the first reason I did even take a look into preprocessors in the first place. And I'm sure I'm not the only one there. Still I thinkt those are one of Sass/LESS strongest features and variables are here even better handled than in the current CSS specification, which seems overly complicated even if it's very powerful. 

But then, even this small feature can be misused in a very unforgiving way, and I almost freaked out when I found this codebit:

<pre>
<code class="language-sass">
$green:  #88b83b;
$grey:   #505050;
$h1-3:   #444;
$text:   #444;
$violet: #5c1c70;
$red:    #d73a41;
</code>
</pre>

This is just amazing, since it lacks any semantics whatsoever. Alright, one might argue that it is okay giving $text and $h1-3 a certain color, but then please just give it a name which is somewhat describing. <code class="language-css">$headline-color: #444;</code> would be nice, since you could use it also with other headlines. <code class="language-css">$text</code> would be nice as <code class="language-css">$standard-text-color</code>, so you might notice that it is a <em>color</em> to begin with. 

But what's absolutely catastrophical is the declaration of the other colors in this snipplet. Imagine having a nice <code class="language-sass">$green</code> layout and suddenly changing everything to babyblue. You still would have your <code class="language-sass">$green</code> declarations all over your preprocessor CSS files, but the meaning would be already different. Change it to <code class="language-sass">$base-ci-color</code> or something like that.

If you find it easier to give colors of a certain brand style guide a name like green, grey, whatsoever, define a position with colors in your preprocessor CSS file, and then using describtive variables, e.g.:

<pre>
<code class="language-sass">
/** CI COLORS **/
$green:  #88b83b;
$red:    #d73a41;
$violet: #5c1c70;

/** global color variables **/
$default-brand-color:    $green;
$emphazised-brand-color: $red;
$default-link-color:     $green;

a, a:visited {
	color: $default-link-color;
}

h1, .h1 {
	color: $green;
}

...

</code>
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date>2012-11-27 16:37:21</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Content Loading Priorities or: When is the document ready()?</title>
		<link>https://fettblog.eu/?p=108</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[<p>A client of ours had a desperate call: Their website, though highly optimised with modern frontend technologies, loads just outright slow with a 1 MBit connection on IE9. Our first reaction was, "Right, it's just 1 MBit", but that wasn't the troubling part. Our customer's issue was "<strong>It takes forever until our logo is shown!</strong>".</p>

<p>The problem occurred heavily on one single page: A rich product catalog with about 200 to 300 products. Unfortunately, due to system constraints, we have to load the whole catalog at once, included in the DOM.</p>

<p>The symptoms -- as our customer reported -- where:</p>

<ul>
<li>the company's logo isn't shown until the end of the loading process</li>
<li>the dropdown menus take forever until they show up</li>
<li>for several seconds (up to half a minute on 1 MBit connections) website's dynamic components aren't usable at all</li>
</ul>

<!--more-->

<p>We worked with modern coding principles, like putting all the JavaScript files on the bottom of the page, just having one single CSS file, and loading fallbacks depending on your browser's features.</p>

<p>This is how IE9 loads the site:</p>

<ul>
<li>files are getting loaded and parsed once they have a reference in the HTML document</li>
<li>which means that if a browser can afford 3 connections at a time, and you have a lot of references, it takes some time until the scripts get loaded.</li>
<li>once every element on the website is loaded, IE9 fires the DOMContentLoaded event (better known as $(document).ready(...) for you jQuery webworkers out there)</li>
<li>scripts are parsed and executed immediately</li>
<li>once all elements are available, the objects (fonts/images) referenced in the stylesheet are loaded. This means that once </li>
</ul>

<p>And this is, according to the <a href="https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/DOMContentLoaded_(event)" target="_blank">documentation at MDN</a>, a bug:</p>

<blockquote>
  <p>The DOMContentLoaded event is fired when the document has finished loading and being parsed, <strong>without waiting for stylesheets, images, and subframes to be done loading</strong> (the load event can be used to detect a fully-loaded page</p>
</blockquote>

<p>Alright, according to the WHATWG specification, it's just badly interpreted.</p>

<p>This is also why Chrome feels so fast. Not only is DOMContentLoaded fired at the right time, but files have a different priority when downloading. Scripts are getting downloaded (and executed) immediately, images referenced in stylesheets do have a higher priority and are downloaded earlier, and all the other bulk which doesn't have to be available immediately can take it's time, without</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2013-01-11 12:13:21</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="browser"><![CDATA[Browser]]></category>
		<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="post_tag" nicename="domcontentloaded"><![CDATA[DOMContentLoaded]]></category>
		<category domain="post_tag" nicename="ie9"><![CDATA[IE9]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="javascript-2"><![CDATA[javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Fire.js</title>
		<link>https://fettblog.eu/?p=116</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[thpnk]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Here goes the content</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2013-01-11 12:24:02</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Nobody wants HTML5 apps</title>
		<link>https://fettblog.eu/blog/2013/04/24/nobody-wants-html5-apps/</link>
		<pubDate>Wed, 24 Apr 2013 19:48:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There's much buzz going on about HTML5 being just the wrong way of developing apps. Facebook switched to "kind of native" a while ago (and still has an app below standards), now <a href="http://venturebeat.com/2013/04/17/linkedin-mobile-web-breakup/" target="_blank">LinkedIn</a> dropped their HTML5 based app in favor of a native one.</p>

<p>WebApps or HTML5 apps don't get much love, despite a lot of people hating to get almost forced to use native apps instead of a <a href="http://www.netmagazine.com/news/devs-rally-against-mobile-web-doorslams-132705" target="_blank">browser counterpart</a>.</p>

<!--more-->

<blockquote>
  <p>I'm in the browser, of course I want to view the web version!</p>
</blockquote>

<p>That's true! From the ca. 40 apps I've installed on my device, I use 4-8 regularly. Most used app next to twitter is my web browser, and there I like direct access to my services. One of the main reasons companies give once they repel HTML5 is the often heard: "The technology isn't ready yet!".</p>

<p>Some examples to counter that point:</p>

<h2>Forecast.io</h2>

<p>I love weather reports. It's a shtick, I guess. I learned about <a href="http://forecast.io">forecast.io</a> and was pretty amazed that the website didn't want to lead me to the app store, but instead just bookmark their site on my home screen. Said and done, I started the app the first time and fell in love with the UI.</p>

<p class="img-holder">
  <a href="https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-53-46.png"><img src="https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-53-46-200x300.png" alt="Forecast.io" width="200" height="300" class="alignnone size-medium wp-image-124" /></a>
</p>

<p class="img-holder">
 <a href="https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-52-57.png"><img src="https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-52-57-200x300.png" alt="Forecast.io" width="200" height="300" class="alignnone size-medium wp-image-123" /></a>
</p></p>

<p>Be sure to check out the video by <a href="http://www.youtube.com/watch?v=ystXvkb0yIY" target="_blank">CNET</a> so you get a glimpse of how this neat little application feels. All done with HTML5, and by just adding it to the home screen, you get the full Safari features and not just the stripped down UIWebView.</p>

<p>Be sure to <a href="http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/">read their blog post</a> on why and how they created their application using HTML5. I just wonder why I can't use it in my browser, be sure to include that option in the future!</p>

<h1>ExFM</h1>

<p>Next is ExtFM. ExtFM is a music discovery application, where you can find new tunes according to your listening habits. Good for music nerds like me, and even better for HTML5 enthusiasts. Their application was written using PhoneGap. You know, that tool that allows you to use web rendering for your applications. And again, a very nice UI with good responses and virtually not distinguishable from a native app.</p>

<p class="img-holder">
  <a href="https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-54-34.png"><img src="https://fettblog.eu/wp-content/uploads/2013/04/Foto-24.04.13-20-54-34-200x300.png" alt="ExtFM, based on PhoneGap" width="200" height="300" class="alignnone size-medium wp-image-125" /></a>
</p>

<p>Even cooler is that they switched <a href="http://phonegap.com/blog/2013/04/23/story-behind-exfm/" target="_blank">from native to HTML5</a>, and not the other way round. "We have now more stars" - quotes aside they show some useful insights in how they developed the new client.</p>

<h2>So where's the problem?</h2>

<blockquote>
  <p>The problem isn't that HTML5 isn't ready, it’s that the ecosystem doesn’t support it!</p>
</blockquote>

<p>That's one of the true quotes in Kirin Prasads interview. Why so? The examples above showed some great iOS apps. iOS Safari -- while not being a perfect browser -- is actually quite decent and performs really good. Apps based on iOS Safari aren't the culprit in this discussion.</p>

<p>It's mostly Android. HTML5/PhoneGap apps use android.webkit.Webview, and Android WebView/Android Stock browser simply sucks. Everybody wants Android browser to silently die and be replaced with another web engine that actually can perform and provide us with all our HTML5 needs.</p>

<p>Developing for WebView is a challenge. ExFM, while providing a great User Experience with a PhoneGap app on iOS, still have their Android app native, even though they plan to change that.</p>

<blockquote class="twitter-tweet" lang="de">
  <p>
    @<a href="https://twitter.com/ddprrt">ddprrt</a> Thank you! We're working on Android now, but WebView is definitely a challenge.
  </p>— exfm (@exfm) 
  
  <a href="https://twitter.com/exfm/status/327133594243960834">24. April 2013</a>
</blockquote>

<p>I think history is repeating itself. In the old desktop days there was a slight transition from using installed software to just starting the browser. I switched from endless installs (and tedious updates) of mail software to Google Mail in 2006 and don't regret one day since then. I don't install office software anymore because I can use Google Docs, and if there would be a nice Spotify webapp, I'm sure I would use that instead of the ever-crashing native client.</p>

<p>It wasn't always like that, so I think it just will take some time people will do the same transition in the mobile world. Browsers need to supply certain features and we're good!</p>

<p>After all, installing and updating my apps annoyed me fairly early in my mobile life.</p>

<h2>Further reading:</h2>

<ul>
<li><a href="http://venturebeat.com/2013/04/17/linkedin-mobile-web-breakup/" target="_blank">LinkedIn drops HTML5 app</a></li>
<li><a href="http://www.netmagazine.com/news/devs-rally-against-mobile-web-doorslams-132705" target="_blank">Devs rally against mobile web doorslams</a></li>
<li><a href="http://phonegap.com/blog/2013/04/23/story-behind-exfm/" target="_blank">The story behind EXFM</a></li>
<li><a href="http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/">It's not a web app, it's an app you install from the web -- forecast.io</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2013-04-24 21:48:17</wp:post_date>
		<wp:post_date_gmt>2013-04-24 19:48:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nobody-wants-html5-apps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="fuuuuu"><![CDATA[Fuuuuu]]></category>
		<category domain="category" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Remake. Remodel. Part 2</title>
		<link>https://fettblog.eu/blog/2013/04/30/remake-remodel-part-2/</link>
		<pubDate>Tue, 30 Apr 2013 14:52:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://blog.cloudfour.com">@grigs</a> said I should blog, so I'm going to take this thing seriously now. I spent the last few days (finally) creating a new look for my website. With the advent of flat designs I think I'm able to create at least one style that doesn't fail completely. And actually I'm pretty happy with it. 

I just had one big constraint in developing the new templates: Use as much of the standard Twentytwelve Wordpress markup as possible. Which means: Just change the CSS. It worked out ... okay, for the most part.

<!--more-->

Things like my need to put the search bar somewhere else or to feature the social channels a little more took some time in the backend, but other than that a lot was created by just scrapping the original CSS and replacing it with my own.

Nonetheless, having not developed CMS solutions for about one and a half year, I was pretty overwhelmed by all those options and template parts available now in Wordpress and almost got lost in all the different includes and template tags available.

Well, whatever, I think it's good for now, though I wished templating for a blog platform would be easier. That's why I've an eye on <a href="http://www.kickstarter.com/projects/johnonolan/ghost-just-a-blogging-platform">Ghost</a>, which I discovered today after a tweet by Scott Jehl. WordPress is a full fledged CMS by now, and maybe we need something a little more focussed again.

Check out their video and try some parts on their <a href="http://tryghost.org/features.html">website</a>. Very promising!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2013-04-30 16:52:04</wp:post_date>
		<wp:post_date_gmt>2013-04-30 14:52:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>remake-remodel-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cms"><![CDATA[CMS]]></category>
		<category domain="post_tag" nicename="ddprrt"><![CDATA[ddprrt]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="post_tag" nicename="ghost"><![CDATA[Ghost]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Responsive Reengineering / Refactoring</title>
		<link>https://fettblog.eu/?p=196</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=196</guid>
		<description></description>
		<content:encoded><![CDATA[So i had the task of creating some sort of "responsive add-on" to our company's website at <a href="http://www.netural.com">Netural</a>. Those tasks I usually do on my own, because the effort going into that cannot be estimated before. It was about 4 hours. And I'm pretty happy with the result, despite it being the thing no developer wants: an old webpage "modernized".

Here's how I approached it:

<!--more-->

<p class="img-holder"><a href="https://fettblog.eu/wp-content/uploads/2013/06/Bildschirmfoto-2013-06-04-um-16.07.15.png"><img src="https://fettblog.eu/wp-content/uploads/2013/06/Bildschirmfoto-2013-06-04-um-16.07.15-300x243.png" alt="Desktop Variant" width="300" height="243" class="alignnone size-medium wp-image-197" /></a></p>

<p class="img-holder"><a href="https://fettblog.eu/wp-content/uploads/2013/06/Foto-03.06.13-11-58-13.png"><img src="https://fettblog.eu/wp-content/uploads/2013/06/Foto-03.06.13-11-58-13-200x300.png" alt="Mobile Variant" width="200" height="300" class="alignnone size-medium wp-image-198" /></a></p>

First of all, the code to this webpage was at least 4 years old. So plenty of pixel-loving and IE6/IE7 hotfixing. Furthermore, each design template (talking PSDs now) got its own sort of "namespace" once it was translated into CSS. Which meant: And ID per template.

The reason behind that was obvious: let the one template not interfere with the other one, and let the CSS files be organized in at least "some" way. But this also meant: Lot's of code reproduction, nothing DRY at all. Gladly enough, the main grid was not part of that, but several forms were.

Anyways, rather rapid steps to achieve the goal:

<h2>1. Percentage all the things!</h2>

Easy: You have a wrapper holding all the elements together, so the elements inside don't need pixels anymore. Just change your grids to flexible units (like percents). Also, change the width property of your wrapper to max-width. 

<pre><code class="language-css">
.wrapper {
  margin: 0 auto;
  max-width: 960px; /* was: width */
}

.grid-main {
  width: 60%; /* was: 576px; */
  float: left;
}

.grid-side {
  width: 40%; /* was: 384px; */
  float: left;
}
</code></pre>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date>2013-06-04 16:48:15</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css3"><![CDATA[CSS3]]></category>
		<category domain="post_tag" nicename="css3"><![CDATA[CSS3]]></category>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="responsive"><![CDATA[Responsive]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>beyond our own noses - the &quot;beyond tellerrand 2013&quot;</title>
		<link>https://fettblog.eu/blog/2013/06/06/beyond-our-own-noses-the-beyond-tellerrand-2013/</link>
		<pubDate>Thu, 06 Jun 2013 11:34:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[Crosspost from <a href="http://www.netural.com">Netural</a>:

Not one single line of JavaScript code? At a conference where web developers visibly outnumbered the rest of the audience? Yes, they can: Düsseldorf's <a href="http://2013.beyondtellerrand.com">"beyond tellerrand"</a> conference saw its third edition this year, and what initially started as a somewhat obscure insider gathering is now a definite "Be there or be square" for designers and coders. How come?  Well, "beyond tellerrand" translates as "beyond our own noses", and that is exactly what the event is about: Widening the horizon of web developers. Planting fresh ideas into bright brains. Seeding energizing motivation into otherwise boring "business as usual". Throwing a spotlight on fields which are closely linked to our own work, yet rarely part of our considerations. In other words, the principles of the Netural environment get blown up to a full-size conference here. 

<!--more-->

<p class="img-holder"><a href="https://fettblog.eu/wp-content/uploads/2013/06/beyond1.jpg"><img src="https://fettblog.eu/wp-content/uploads/2013/06/beyond1-300x200.jpg" alt="beyond1" width="300" height="200" class="alignnone size-medium wp-image-209" /></a></p>

<a href="http://adactio.com">Jeremy Keith</a>'s opening keynote set the pace and defined the discourse level. He discussed the web's sustainability and longevity, stating that "the web never forgets" is not necessarily set in stone - at least not as solidly as some would like to believe. He challenged the audience to name web addresses which are still relevant after 15 years of existence.  Indeed, there are not many, if any. Keith then presented the archivars of the web (the <a href="http://archive.org/web/web.php">Wayback Machine</a>) and introduced a number of other relevant projects in this field.

Regarding design, the loudest slogan at the conference was "Photoshop Lies!". In the face of the multiple aspects of mobile design, Adobe's long-familiar tool runs the danger of being reduced to a sidekick role in design processes, still indispensable for final touch ups,  but replaced by early prototyping in HTML and CSS  for the new flexible layouts. This view was stated by <a href="https://twitter.com/owltastic">Megan Fisher </a>and shared by Twitter's <a href="http://jbrewer.me">Josh Brewer</a>, who took a radical, if time-honored approach to getting the message across: Grabbing his six-string and singing his "Photoshop, you damn liar!" protest song, he gave a whole new meaning to the word "keynote". 

<p class="img-holder"><a href="https://fettblog.eu/wp-content/uploads/2013/06/beyond3josh.jpg"><img src="https://fettblog.eu/wp-content/uploads/2013/06/beyond3josh-300x200.jpg" alt="beyond3josh" width="300" height="200" class="alignnone size-medium wp-image-211" /></a></p>

Oh, yes - CSS: Of course there were also stylesheet gurus, presenting new principles and methods to update processes on the developers' side. The CSS Wizard himself, <a href="http://csswizardry.com">Harry Roberts</a>, gave vivid examples for making directives scaleable and recyclable, and <a href="http://bradfrostweb.com">Brad Fros</a>t with his Pattern Lab proclaimed the birth of the "Atomic Design" movement: not just a buzzword (although that would have been helfpful enough in itself), rather a well-considered new structuring of websites.

My personal highlight at the "beyond tellerrand" shone a good distance away from development, design and typo themes: <a href="http://www.forbes.com/fdc/welcome_mjx.shtml">Kate Kiefer-Lee </a>discussed the voice in which a website talks to the user. As the content mastermind of newsletter providers <a href="http://mailchimp.com">Mailchimp</a>, she discussed the thin red line between humor and impertinence and the art of getting the message across according to varying circumstances. A visible result of her work is <a href="http://voiceandtone.com">Voice and Tone</a>, a Website which does not only observe user moods, but also works on them.


<p class="img-holder"><a href="https://fettblog.eu/wp-content/uploads/2013/06/beyond2kate.jpg"><img src="https://fettblog.eu/wp-content/uploads/2013/06/beyond2kate-300x200.jpg" alt="beyond2kate" width="300" height="200" class="alignnone size-medium wp-image-210" /></a></p>

Living up to its name, beyond tellerrand presents not only elite exponents of the web, there are surprise cameos as well: Enter <a href="http://www.jamesvictore.com">James Victore</a>, whose polemical "500 years America" posters produced disputes in the 90ies and are now on exhibition in the MOM. Working not just beyond the rim of our plates, but at least a cupboard away, he still brought a message that gave the audience pause: Do a job you yourself can enjoy, because your work is a gift!

<p class="img-holder"><a href="https://fettblog.eu/wp-content/uploads/2013/06/beyond4james.jpg"><img src="https://fettblog.eu/wp-content/uploads/2013/06/beyond4james-300x200.jpg" alt="beyond4james" width="300" height="200" class="alignnone size-medium wp-image-212" /></a></p>

So this was my first "beyond tellerrand", and it was definitely not my last one. The phantastic lineup of choice international speakers and the flawless organisation created a unique environment. Somehow the conference resembled a class reunion of a web developer scene which enjoyed a time out from JavaScript. Kudos to organiserr Marc Thiele: Marc, you have created something absolutely beautiful!

Fotos by <em><a href="https://twitter.com/stn1978" target="_blank">Stefan Nitzsche</a></em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2013-06-06 13:34:43</wp:post_date>
		<wp:post_date_gmt>2013-06-06 11:34:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beyond-our-own-noses-the-beyond-tellerrand-2013</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="beyond-tellerrand"><![CDATA[beyond tellerrand]]></category>
		<category domain="category" nicename="conference"><![CDATA[Conference]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="design"><![CDATA[Design]]></category>
		<category domain="post_tag" nicename="ux"><![CDATA[UX]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Content issues on responsive refactoring</title>
		<link>https://fettblog.eu/?p=223</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date>2013-06-12 10:00:17</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Image traffic compared to other assets on responsive websites</title>
		<link>https://fettblog.eu/?p=224</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2013-06-12 10:00:40</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Adding CSS logic with siblings selectors</title>
		<link>https://fettblog.eu/?p=225</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2013-06-12 11:42:37</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Women in tech</title>
		<link>https://fettblog.eu/?p=262</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=262</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date>2013-07-09 11:42:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Icon Font Workflow w. IcoMoon</title>
		<link>https://fettblog.eu/?p=414</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=414</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date>2013-08-21 16:49:30</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="icomoon"><![CDATA[IcoMoon]]></category>
		<category domain="category" nicename="sass"><![CDATA[Sass]]></category>
		<category domain="post_tag" nicename="sass"><![CDATA[Sass]]></category>
		<category domain="category" nicename="svg"><![CDATA[SVG]]></category>
		<category domain="category" nicename="webfonts"><![CDATA[Webfonts]]></category>
		<category domain="post_tag" nicename="workflows"><![CDATA[Workflows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title></title>
		<link>https://fettblog.eu/?p=417</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=417</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I've been co-supervising the go-live of a -- at least by Austrian standards -- rather huge project.

Much to my chagrin, rather early in the project the project leaders decided not to go for a responsive website, but rather have a mobile only website instead.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date>2013-08-27 09:47:17</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Preserving aspect ratio for embedded iframes</title>
		<link>https://fettblog.eu/blog/2013/06/16/preserving-aspect-ratio-for-embedded-iframes/</link>
		<pubDate>Sun, 16 Jun 2013 12:10:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=173</guid>
		<description></description>
		<content:encoded><![CDATA[If you want to use videos on your webpage which are hosted on another server (YouTube, Vimeo, whatever), you most likely will use their embedding possibility rather than the HTML5 &lt;video&gt; Tag or a flash plugin hosted on your server. These embedding codes mostly use &lt;iframe&gt;, which is good since they detect all your needs on their site, like in "what format do you need", "use either HTML5 or Flash", or "streaming HD or lower definition for mobile phones". A lot of decisions are taken from you!

However, you will have to specify the size of the iframe. And if your responsive layout scales your content flexibly according to the viewport width rather than fixed widths on breakpoints (like this page), the embedding iframe may look especially bad on smaller screens. Here's a solution to keep the aspect ratio:

<!--more-->

I'll use a trailer video from on of our projects. The girl in this video is Tina, one of our developers. The standard embedding code I get from vimeo looks something like this:
<pre><code class="language-markup">
&lt;iframe src="http://player.vimeo.com/video/61337126"
  width="550" height="281" frameborder="0"&gt;
&lt;iframe&gt;
</code></pre>
Alright, the cheapest way to achieve resizing according to viewport/content width is by simply adding some CSS for your iframe:
<pre><code class="language-css">
iframe {
  width: 100%;
}
</code></pre>
And the iframe is as wide as the container you put him in. However, the height can't be controlled that easily. To preserve that aspect ratio, you need a wrapper div, let's call it .aspect-ratio:
<pre><code class="language-css">
.aspect-ratio {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 51%;
}
</code></pre>
This div is as wide as the content/viewport area, the height is zero. So practically this shouldn't be visible. However. The padding of this one is the height of the video divided through its width, or in other words: the aspect ratio in percent! No matter how much you resize your window, it will always stay in this ratio. So, all you need now is to let the iframe inside flow to each corner of its parent:
<pre><code class="language-css">
.aspect-ratio iframe {
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0; top: 0;
}
</code></pre>

Since the parent element has no height, we place it absolutely on the top left corner and let the iframe use the space created by the padding.

And voilá:
<div class="content-wrapper">
<div class="aspect-video"><iframe src="http://player.vimeo.com/video/61337126" height="281" width="550" allowfullscreen="" frameborder="0"></iframe></div>
</div>
Resize the window and try it!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date>2013-06-16 14:10:38</wp:post_date>
		<wp:post_date_gmt>2013-06-16 12:10:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preserving-aspect-ratio-for-embedded-iframes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="responsive"><![CDATA[Responsive]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Caring for Sharing: Social share URLs</title>
		<link>https://fettblog.eu/blog/2013/06/17/caring-for-sharing-social-share-urls/</link>
		<pubDate>Mon, 17 Jun 2013 12:17:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[I truly hate social media share buttons. Especially those plugins which not only are coded badly but also create heavy traffic and performance issues. Plus, they're a pain in the ass to place correctly. If you really want to use (or have to use) those social liking/sharing/tweeting stuff, use their share URLs. Every single one of them has such, and you can either open them in a pop-up or in a new window. Here they are:

<!--more-->
<h3>Twitter</h3>
<pre><code class="language-markup">http://twitter.com/home?status=Check%20out%20{articleUrl}</code></pre>

<h3>Facebook</h3>
<pre><code class="language-markup">http://www.facebook.com/sharer.php?u={articleUrl}</code></pre>

<h3>LinkedIn</h3>

<pre><code class="language-markup">http://www.linkedin.com/shareArticle?mini=true&url={articleUrl}
  &title={articleTitle}
  &summary={articleSummary}
  &source={articleSource}</code></pre>

<h3>Google+</h3>

<pre><code class="language-markup">https://plus.google.com/share?url={articleUrl}</code></pre>

<h3>Pinterest</h3>

<pre><code class="language-markup">http://pinterest.com/pin/create/button/?url={articleUrl}
  &media={articleImage}</code></pre>


Just replace {articleUrl} with the respective location.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2013-06-17 14:17:00</wp:post_date>
		<wp:post_date_gmt>2013-06-17 12:17:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caring-for-sharing-social-share-urls</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="facebook"><![CDATA[Facebook]]></category>
		<category domain="post_tag" nicename="google-plus"><![CDATA[Google Plus]]></category>
		<category domain="category" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="pinterest"><![CDATA[Pinterest]]></category>
		<category domain="post_tag" nicename="social-media"><![CDATA[Social Media]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Preparing for an unprefixed future</title>
		<link>https://fettblog.eu/blog/2013/07/02/preparing-for-an-unprefixed-future/</link>
		<pubDate>Tue, 02 Jul 2013 19:53:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[I realized recently that I don't have to use "<em>-webkit</em>" on the transition property anymore for Chrome. Actually, to use transitions in modern desktop browsers I don't have to use any prefix at all. This was almost unimaginable a few months ago!

This is all part of a certain change. Google, Microsoft and Mozilla have a clear direction on that topic: If you are going to use the stable version of the browser, features don't require a vendor prefix. Actually, this is something we are already used to in the desktop world to a certain extent: Nobody would use a vendor prefix on <em>border-radius</em> or <em>box-shadow</em> anymore, because they left the experimental state.
<!--more-->
<h2>The Past</h2>

Vendor prefixed features were really good back then, when we needed to overcome the "legacy browser" mindset of developers and clients alike, and had to show what was possible with all the new features now available. This trend was also driven by the new possibilities of HTML5 apps on mobile browsers: Everything you can do natively with CSS3 helps download and render times on your mobile client.

Those features matured and became stable, and are now base of our day to day work. We have a new base available with browser updating on a regular basis and ensuring that features become available in a shorter amount of time.

<h2>... and now</h2>

Experimental (now) means: really not ready for production code. Experimental features are for you developers, to try and get familiar with the new APIs. Experimental (and thus prefixed) features are not for the things you throw at your users. Those features will most likely fail, or behave differently in other browsers, or worse: will change their API over the course of time. So don't use them in your production code. They are not ready yet.

This goes for all those legacy browsers out there we still have to support. Developers and browser vendors created awareness that it's okay not to have the same experience in legacy IE compared to modern browsers. Everybody's fine with that. In the meantime, Android Stock Browser has become the biggest problem for web developers. Android browser (amongst others) has one really big issue: It has plenty of new features available, but they really suck in their implementation. Now-common things like <em>box-shadow</em>, <em>transitions</em> and even <em>border-radius</em> not only behave differently, but also can cause performance and display issues. Keep in mind that "available" does not have to mean "usable".

So it's time to treat those features for what they are: experimental. Not ready for production code. Drop those vendor-prefixes!

We don't care anymore if our corners are rounded on legacy desktop browsers, and we shouldn't care either on legacy mobile browsers.

<h2>but but but ...</h2>

Yeah, I know: This means a big change on certain platforms! While a lot of features are already unprefixed available, others are still in the experimental stage on almost all mobile browsers. Even such "game-changers" like <em>linear-gradient</em> or <em>animation</em>, and even on upcoming platforms. This goes especially for Mobile Safari, who -- according to the preview version -- still has some features prefixed. But hey, there is (or at least might be) a reason for that! So treat them for what they are: not ready yet.

<h2>Prefix free!</h2>

"Prefix-free" should not only be a JavaScript library, but a new mindest. And yeah: I do want a Modernizr distribution, that just checks for unprefixed and stable features.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2013-07-02 21:53:46</wp:post_date>
		<wp:post_date_gmt>2013-07-02 19:53:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preparing-for-an-unprefixed-future</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blink"><![CDATA[Blink]]></category>
		<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="css3"><![CDATA[CSS3]]></category>
		<category domain="category" nicename="feature-detection"><![CDATA[Feature Detection]]></category>
		<category domain="post_tag" nicename="features"><![CDATA[Features]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="category" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="category" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="mozilla"><![CDATA[Mozilla]]></category>
		<category domain="post_tag" nicename="vendor-prefixes"><![CDATA[Vendor Prefixes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Basic SVG path tweening with SMIL</title>
		<link>https://fettblog.eu/blog/2013/07/16/basic-svg-path-tweening-with-smil/</link>
		<pubDate>Tue, 16 Jul 2013 18:50:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[<style>@media(max-width:500px){.responsive-svg{width:100%;}.responsive-svg path{-webkit-transform:scale(0.5); transform:scale(0.5);}}.note{display:none;}.sorrynote{background-color: #c84941; color:white;display:block;}</style>

<p id="feature-test2" class="note">Sorry, your browser does not support SVG animations with SMIL.<script>var el=document.getElementById('feature-test2');try{var n=document.createElementNS('http://www.w3.org/2000/svg', 'animate'); if(!n){ el.className+=" sorrynote";}}catch(e1){el.className+=" sorrynote";}</script></p>

I'm working on a tribute to one of my childhood heroes, the Caped Crusader, the Dark Knight, the world's greatest detective: Batman. And when I say childhood hero, I do mean a hero to this day. Anyhow, inspired by an EPS file i got over on DeviantArt, I wanted to create a history of his emblems from the very first to the very last, spanning all 73 years, much like <a href="http://www.youtube.com/watch?v=AKR_4kRDR9s" target="_blank">this now infamous video</a> did.

First I had the idea of just fading over the logos, but that's actually kinda boring, so I went back to a rad idea I used once back then when Macromedia Flash 4 was still in its early days: Tweening! (well, just like in the video, no?)

After a little research, I stumbled upon two ways to do it: Animating SVG with RaphaëlJS, a JavaScript library for cross-browser SVG, or using the very powerful <strong>SMIL for SVG animations</strong>.

All right! To the Batcave, Robins!
<!--more-->
<p class="img-holder"><img style="width: 80%; height: auto" src="https://fettblog.eu/wp-content/uploads/2013/07/bat63.svg" /></p>

<h2>A short thought on RaphaëlJS</h2>

We already have some experience with <a href="http://raphaeljs.com/">RaphaëlJS</a> in our company. We used the library to create parts of <a href="http://www.customize-eyewear.com">Adidas Customize</a> to achieve recolorable, complex formed widgets on IE7 and IE8.

The library also allows to animate between paths, and does it in a very interesting, jQuery-like way: Instead of using SMIL, RaphaëlJS interpolates path points between the start and ending state and constantly updates the path inside your SVG. I was stunned by the complexity of this rather powerful algorithm, but looking at it from a performance point of view ... nah, you get the same issues you love to hate from jQuery.

RaphaëlJS is good if you don't want to delve to deeply into drawing programs or SVG source code, and I used it mainly to apply certain transformations on exiting SVG paths, and then copying the new SVG result. But for my tribute page I dropped it completely and just used it as a fallback for IE, because SMIL is still not implemented and looking at the current preview of IE11, will not be landing there for quite some while.

But the main reason for me to use SMIL was a rather clear one: Why using an 80kb JavaScript library if I can do everything with native means?

<h2>The first animation</h2>

My work is based on a great animation done by <a href="http://tavmjong.free.fr/blog/?p=741" target="_blank">Tavmjong Bah</a>. In his blog post he give additional information on how he actually implemented it. Some important parts were: The SVG paths you want to transform have to be in the same pattern, otherwise you don't get any animation at all:

<p class="img-holder"><svg width="200" height="180"><path fill="#000000" stroke="#000000" d="M89.71882,171.78893C89.71882,171.78893,89.45803999999998,172.95614999999998,95.51977999999997,134.96961999999996C101.57930999999996,96.96831999999999,107.63882999999998,86.47806999999999,113.69879999999995,86.28599999999999C119.76067999999992,86.10869999999998,124.42337999999995,96.49551999999998,127.21909999999997,106.52774999999998C130.01718999999997,116.54519999999998,132.58257999999995,134.96961999999996,132.58257999999995,134.96961999999996C132.58257999999995,134.96961999999996,136.54286999999994,113.75271999999997,138.17623999999995,105.36052999999997C139.80665999999997,96.96831999999996,146.80188999999996,79.48949999999998,152.39422999999994,79.25309999999998C157.99099999999993,79.01669999999997,162.88447999999994,87.88169999999998,166.14679999999993,100.23359999999998C169.41206999999991,112.58549999999998,167.5459899999999,128.66069999999996,167.5459899999999,128.66069999999996C167.5459899999999,128.66069999999996,179.43542999999988,108.62579999999998,179.43542999999988,74.58419999999997C179.43542999999988,40.55736999999998,166.14679999999987,20.862299999999962,166.14679999999987,20.862299999999962C126.52068999999989,45.21149999999996,105.7739299999999,41.72459999999997,105.7739299999999,41.72459999999997C109.26983999999987,16.784399999999962,103.6766199999999,-4.263256414560601e-14,103.6766199999999,-4.263256414560601e-14C103.6766199999999,-4.263256414560601e-14,97.61487999999991,10.711869999999962,97.61487999999991,10.711869999999962C95.51977999999991,8.613819999999961,89.71881999999994,8.39219999999996,89.71881999999994,8.39219999999996C89.71881999999994,8.39219999999996,83.91563999999994,8.613819999999961,81.81891999999993,10.711869999999962C81.81891999999993,10.711869999999962,75.75939999999991,-4.263256414560601e-14,75.75939999999991,-4.263256414560601e-14C75.75939999999991,-4.263256414560601e-14,70.16336999999993,16.784399999999962,73.65971999999994,41.72459999999997C73.65971999999994,41.72459999999997,52.91236999999995,45.21149999999996,13.286559999999952,20.862299999999962C13.286559999999952,20.862299999999962,-5.684341886080802e-14,40.55736999999998,-5.684341886080802e-14,74.58419999999997C-5.684341886080802e-14,108.62579999999996,11.887519999999938,128.66069999999996,11.887519999999938,128.66069999999996C11.887519999999938,128.66069999999996,10.02216999999996,112.58549999999998,13.286559999999952,100.23359999999998C16.550359999999955,87.88169999999998,21.44560999999993,79.01669999999997,27.038839999999936,79.25309999999998C32.63427999999993,79.48949999999998,39.62639999999993,96.96831999999996,41.257409999999936,105.36052999999997C42.890789999999924,113.75271999999997,46.85284999999993,134.96961999999996,46.85284999999993,134.96961999999996C46.85284999999993,134.96961999999996,49.416609999999935,116.54519999999998,52.21454999999992,106.52774999999998C55.01204999999993,96.49551999999998,59.675479999999936,86.10869999999998,65.73485999999991,86.28599999999999C71.79437999999993,86.47806999999999,77.85611999999992,96.96831999999999,83.91563999999994,134.96961999999996C89.97796999999991,172.95614999999998,89.71881999999994,171.78893,89.71881999999994,171.78893" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"><animate dur="3s" repeatCount="indefinite" attributeName="d" values="M89.71882,171.78893C89.71882,171.78893,89.45803999999998,172.95614999999998,95.51977999999997,134.96961999999996C101.57930999999996,96.96831999999999,107.63882999999998,86.47806999999999,113.69879999999995,86.28599999999999C119.76067999999992,86.10869999999998,124.42337999999995,96.49551999999998,127.21909999999997,106.52774999999998C130.01718999999997,116.54519999999998,132.58257999999995,134.96961999999996,132.58257999999995,134.96961999999996C132.58257999999995,134.96961999999996,136.54286999999994,113.75271999999997,138.17623999999995,105.36052999999997C139.80665999999997,96.96831999999996,146.80188999999996,79.48949999999998,152.39422999999994,79.25309999999998C157.99099999999993,79.01669999999997,162.88447999999994,87.88169999999998,166.14679999999993,100.23359999999998C169.41206999999991,112.58549999999998,167.5459899999999,128.66069999999996,167.5459899999999,128.66069999999996C167.5459899999999,128.66069999999996,179.43542999999988,108.62579999999998,179.43542999999988,74.58419999999997C179.43542999999988,40.55736999999998,166.14679999999987,20.862299999999962,166.14679999999987,20.862299999999962C126.52068999999989,45.21149999999996,105.7739299999999,41.72459999999997,105.7739299999999,41.72459999999997C109.26983999999987,16.784399999999962,103.6766199999999,-4.263256414560601e-14,103.6766199999999,-4.263256414560601e-14C103.6766199999999,-4.263256414560601e-14,97.61487999999991,10.711869999999962,97.61487999999991,10.711869999999962C95.51977999999991,8.613819999999961,89.71881999999994,8.39219999999996,89.71881999999994,8.39219999999996C89.71881999999994,8.39219999999996,83.91563999999994,8.613819999999961,81.81891999999993,10.711869999999962C81.81891999999993,10.711869999999962,75.75939999999991,-4.263256414560601e-14,75.75939999999991,-4.263256414560601e-14C75.75939999999991,-4.263256414560601e-14,70.16336999999993,16.784399999999962,73.65971999999994,41.72459999999997C73.65971999999994,41.72459999999997,52.91236999999995,45.21149999999996,13.286559999999952,20.862299999999962C13.286559999999952,20.862299999999962,-5.684341886080802e-14,40.55736999999998,-5.684341886080802e-14,74.58419999999997C-5.684341886080802e-14,108.62579999999996,11.887519999999938,128.66069999999996,11.887519999999938,128.66069999999996C11.887519999999938,128.66069999999996,10.02216999999996,112.58549999999998,13.286559999999952,100.23359999999998C16.550359999999955,87.88169999999998,21.44560999999993,79.01669999999997,27.038839999999936,79.25309999999998C32.63427999999993,79.48949999999998,39.62639999999993,96.96831999999996,41.257409999999936,105.36052999999997C42.890789999999924,113.75271999999997,46.85284999999993,134.96961999999996,46.85284999999993,134.96961999999996C46.85284999999993,134.96961999999996,49.416609999999935,116.54519999999998,52.21454999999992,106.52774999999998C55.01204999999993,96.49551999999998,59.675479999999936,86.10869999999998,65.73485999999991,86.28599999999999C71.79437999999993,86.47806999999999,77.85611999999992,96.96831999999999,83.91563999999994,134.96961999999996C89.97796999999991,172.95614999999998,89.71881999999994,171.78893,89.71881999999994,171.78893;M89.7158785,166.02668C86.3619535,160.60424999999998,80.93657350000001,103.02607999999998,64.1551285,101.47469999999998C56.689320499999994,100.79505,51.4988635,118.52504999999996,51.4988635,118.52504999999996C50.4690455,112.83667999999994,41.6897405,91.14696999999995,26.195198500000004,89.86154999999997C10.702133500000002,88.56134999999995,0.11289030000000277,113.10262999999998,0.11289030000000277,113.10262999999998C0.11289030000000277,113.10262999999998,-1.6940921999999974,77.7165,9.150757500000005,47.76756999999998C19.995608500000007,17.81864999999999,39.105593500000005,1.2854199999999878,39.105593500000005,1.2854199999999878C48.402023500000006,23.492250000000013,67.25049050000001,27.88041999999996,70.86888850000001,29.180619999999976C74.48728550000001,30.466049999999996,73.96868350000001,26.07786999999996,73.96868350000001,26.07786999999996C73.96868350000001,7.224969999999985,84.01272850000001,-5.684341886080802e-14,84.01272850000001,-5.684341886080802e-14C80.8937255,5.156469999999956,84.01272850000001,12.913349999999923,84.01272850000001,12.913349999999923C85.55671550000001,11.361969999999928,87.3917705,11.110799999999927,89.7158785,11.110799999999927C92.0458955,11.110799999999927,93.8809505,11.361969999999928,95.4190285,12.913349999999923C95.4190285,12.913349999999923,98.5439415,5.156469999999899,95.4190285,-5.684341886080802e-14C95.4190285,-5.684341886080802e-14,105.4689815,7.224969999999928,105.4689815,26.07786999999996C105.4689815,26.07786999999996,104.95038149999999,30.46604999999994,108.5687815,29.180619999999976C112.1827415,27.88041999999996,131.0297315,23.492249999999956,140.3261615,1.2854199999999878C140.32716150000002,1.2854199999999878,159.4376315,17.81864999999999,170.28248150000002,47.76756999999998C181.12733150000003,77.7165,179.3203415,113.10262999999998,179.3203415,113.10262999999998C179.3203415,113.10262999999998,168.7296215,88.56134999999995,153.24247150000002,89.86154999999997C137.74793150000002,91.14696999999995,128.9686215,112.83667999999994,127.93437150000003,118.52504999999996C127.93437150000003,118.52504999999996,122.74391150000002,100.79504999999995,115.28254150000002,101.47469999999998C98.49518150000003,103.02607999999998,93.07571350000002,160.60424999999998,89.71587850000003,166.02668"/></path></svg></p>

Not even those funky effects we know from Flash back then, which is one of the main advantages of RaphaëlJS: The algorithm interpolating between two paths might lead to quirky results, but is nonetheless bloody good!

<pre class="codepen" data-height="300" data-type="result" data-href="ucDwz" data-user="ddprrt" data-safe="true"><code></code><a href="http://codepen.io/ddprrt/pen/ucDwz">Check out this Pen!</a></pre>
<script src="http://codepen.io/assets/embed/ei.js"></script>

Anyhow, I did want to stick to SMIL, but even by using Tavmjongs data I wasn't able to recreate one transition between two bats. It took me some time to realize how Tavmjong was implementing his animation. Mostly because I didn't take a good look at the values. The <code class="language-markup">&lt;animate&gt;</code>-element is pretty straightforward, but the values do need some explanation: To create an animation from path A to B, the values inside the element have to feature both paths, separated by a semicolon. So if you want a transition from Figure A to B, you first have to include the path in your <code class="language-markup">&lt;path&gt;</code>-element, and then again as the first value tuple in your animation:

<pre><code class="language-markup">
&lt;!-- The 'd' in path is the first bat --&gt;
&lt;path 
  d="M 256,213 C 245,181 206,187  ..."
  fill="#000000">
  &lt;!-- The 'values' include the first 
      as well as the second bat --&gt;
  &lt;animate  dur="2s" 
    repeatCount="indefinite" 
    attributeName="d" 
    values="M 256,213 C 245,181 206,187 ... Z; 
            M 212,220 C 197,171 156,153 ... Z;"/&gt;
&lt;/path&gt;
</code></pre>

<h3>Result</h3>

<p class="img-holder"><svg id="svgex1" class="responsive-svg" width="600" height="300"><path d="M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z" fill="#000000"><animate  dur="2s" repeatCount="indefinite" attributeName="d" values="M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z;M 212,220 C 197,171 156,153 123,221 109,157 120,109  159,63.6 190,114  234,115  254,89.8 260,82.3 268,69.6 270,60.3 273,66.5 275,71.6 280,75.6 286,79.5 294,79.8 300,79.8 306,79.8 314,79.5 320,75.6 325,71.6 327,66.5 330,60.3 332,69.6 340,82.3 346,89.8 366,115  410,114  441,63.6 480,109  491,157 477,221 444,153 403,171 388,220 366,188 316,200 300,248 284,200 234,188 212,220 Z;"/></path></svg></p>

Actually, I lied a little bit. You don't need to include the path inside the "d" attribute of the <code class="language-markup">&lt;path&gt;</code>-element. The animation will work fine even without it. But: if you include the path data directly you can do some more, event-based stuff with your SVG. But more on that later. First, check on some of the attributes of the <code class="language-markup">&lt;animate&gt;</code> element.

<h2>Parameters</h2>

Some parameters are already visible in the example above: 

<ul>
  <li><code class="language-markup">dur</code> is short for "duration" and defines exactly that. Use any value in seconds for that.</li>
  <li>Similar, <code class="language-markup">repeatCount</code> allows us to define how often the animation is going to be repeated. It takes any number, or <code class="language-markup">indefinite</code> for endless repeat.</li>
  <li><code class="language-markup">attributeName</code> defines which attribute of the original element is going to be animated. Since the <code class="language-markup">&lt;animate&gt;</code> tag can be used on a multitude of SVG elements, this parameter has a multitude of possibilities. We use the "d" (<em>very</em> short for "path data"), since this is the parameter of the original <code class="language-markup">&lt;path&gt;</code> element.</li>
  <li>Last, but not least we defined a set of <code class="language-markup">values</code></li>

</ul>

We are not done with that. One thing you might realize is that the animation always jumps back to it's initial frame (which is why we also need to define the original path in the parent <code class="language-markup">&lt;path&gt;</code> element). To make sure that the ending state is preserved, we add another attribute called <code class="language-markup">fill</code> and set its value to <code class="language-markup">freeze</code>. In other elements, <code class="language-markup">fill</code> is used to define the filling color, in animation it's the state at the end.

<pre><code class="language-markup">
&lt;animate 
  dur="2s" 

  fill="freeze"

  repeatCount="1" 
  attributeName="d"
  values="..." /&gt;
</code></pre>

<h3>Result</h3>

Trigger the animation by clicking or tapping on it.

<p class="img-holder" id="ex3">
<svg width="600" class="responsive-svg"  height="300"><path id="pathex3" d="M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z" fill="#000000"><animate id="animationex3" dur="2s" fill="freeze" begin="click" repeatCount="1" attributeName="d" values="M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z;M 212,220 C 197,171 156,153 123,221 109,157 120,109  159,63.6 190,114  234,115  254,89.8 260,82.3 268,69.6 270,60.3 273,66.5 275,71.6 280,75.6 286,79.5 294,79.8 300,79.8 306,79.8 314,79.5 320,75.6 325,71.6 327,66.5 330,60.3 332,69.6 340,82.3 346,89.8 366,115  410,114  441,63.6 480,109  491,157 477,221 444,153 403,171 388,220 366,188 316,200 300,248 284,200 234,188 212,220 Z;"/></path></svg</p>

<h2>Triggers</h2>

As you've seen, animations can be triggered on certain actions. Use the <code class="language-markup">begin</code> attribute to define the interaction or property which starts the animation, as well as <code class="language-markup">end</code> to define the interaction which should stop it.

And this is where this stuff becomes really good, as you can add at least some control to your animation. You can either use DOM events for that, like <code class="language-javascript">click</code> (as shown in the example above) or <code class="language-javascript">mouseover</code>, but you also can use time constraints to apply a certain delay:

<pre><code class="language-markup">
&lt;!-- Triggers the animation after 1s --&gt;
&lt;animate
  dur="2s" repeatCount="indefinite"
  attributeName="d"

  begin="1s"

  values="..."
/&gt;


&lt;!-- Triggers the animation when clicking
  on the element --&gt;
&lt;animate
  dur="2s" repeatCount="indefinite"
  attributeName="d"

  begin="click"

  values="..."
/&gt;

&lt;!-- Triggers the animation on mouseover,
  stops it on mouseout --&gt;
&lt;animate
  dur="2s" repeatCount="indefinite"
  attributeName="d"

  begin="mouseover"
  end="mouseout"

  values="..."
/&gt;

&lt;!-- Triggers the animation on click,
  stops it also on click --&gt;
&lt;animate
  dur="2s" repeatCount="indefinite"
  attributeName="d"

  begin="click"
  end="click"

  values="..."
/&gt;

</code></pre>

These parameters take almost any input based DOM event, but with one very special constraint: The SVG data has to be embedded in the DOM. If you have your SVG in a file and are referencing it in an image tag or whatever, the DOM events won't trigger.

Trigger events can be expanded further by not only using the DOM event of an element itself, but also by referencing to an event by another element. For instance, <code class="language-markup">begin="button.click"</code> allows us to trigger the animation once a certain element with the id of <code class="language-markup">button</code> has been clicked.

This gives us a multitude of possibilities. Look at that the following example:

<pre><code class="language-markup">
&lt;svg&gt;
  &lt;path d="..."&gt;
    &lt;animate
      dur="2s" fill="freeze" 
      begin="click" id="anim1"
      values="..." /&gt;
  &lt;/path&gt;
&lt;/svg&gt;

&lt;svg&gt;
  &lt;path d="..."&gt;
    &lt;animate
      dur="2s" fill="freeze" 
      begin="anim1.begin"
      values="..." /&gt;
  &lt;/path&gt;
&lt;/svg&gt;
</code></pre>

Here we start the second animation once the first one has already started.

<h3>Result</h3>

Click on the left bat to see the magic happen.

<p class="img-holder">
<svg width="300" height="200" class="responsive-svg" ><path d="M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z" fill="#000000" transform="scale(0.5)"><animate id="animex7" dur="2s" fill="freeze" begin="click" repeatCount="1" attributeName="d" values="M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z;M 212,220 C 197,171 156,153 123,221 109,157 120,109  159,63.6 190,114  234,115  254,89.8 260,82.3 268,69.6 270,60.3 273,66.5 275,71.6 280,75.6 286,79.5 294,79.8 300,79.8 306,79.8 314,79.5 320,75.6 325,71.6 327,66.5 330,60.3 332,69.6 340,82.3 346,89.8 366,115  410,114  441,63.6 480,109  491,157 477,221 444,153 403,171 388,220 366,188 316,200 300,248 284,200 234,188 212,220 Z;"/></path></svg><svg width="300" height="200"><path d="M 166,154 C 179,119 154,95.4 114,79.3 155,79.1 197,78.9 239,78.7 242,103 250,109 283,109 289,109 290,93.9 291,83.7 292,88.3 292,92.9 293,97.5 295,97.5 298,97.5 300,97.5 302,97.5 305,97.5 307,97.5 308,92.9 308,88.3 309,83.7 310,93.9 311,109 317,109 350,109 358,103 361,78.7 403,78.9 445,79.1 486,79.3 446,95.4 421,119 434,154 377,151 320,151 300,207 280,151 223,151 166,154 Z" transform="scale(0.5)"><animate id="animation2" dur="2s" fill="freeze" begin="animex7.begin" repeatCount="1" attributeName="d" values="M 166,154 C 179,119 154,95.4 114,79.3 155,79.1 197,78.9 239,78.7 242,103 250,109 283,109 289,109 290,93.9 291,83.7 292,88.3 292,92.9 293,97.5 295,97.5 298,97.5 300,97.5 302,97.5 305,97.5 307,97.5 308,92.9 308,88.3 309,83.7 310,93.9 311,109 317,109 350,109 358,103 361,78.7 403,78.9 445,79.1 486,79.3 446,95.4 421,119 434,154 377,151 320,151 300,207 280,151 223,151 166,154 Z; M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z;"/></path></svg>

</p>

<h2>Events</h2>

<p id="feature-test1" class="sorrynote note">Sorry, your browser does not support SMIL events<script>el=document.getElementById('feature-test1');function tstdoit() {el.className="note"};el.innerHTML += '\n<' + 'svg width="0" height="0"' + '>' +'<' + 'path' + ' d="m 1,1 1,1 0,0"><animate values="m 0,0 0,0 0,0" attributeName="d" begin="0s" repeatCount="0" onbegin="tstdoit()"/></path></svg>';</script></p>

SMIL supports some events to add additional control with JavaScript to your animation needs. Unfortunately, at the moment animation events are just implemented by Firefox (and pre-Blink Opera ...). I wanted to use this method not only to show some elements once the animation is done, but also to keep the state ready for the next animation, by removing the <code class="language-markup">&lt;animate&gt;</code>-element and changing the original path. 

I dropped this idea due to browser constraints, tough it would've been easy: Simply add the callback into your markup, or use <code class="language-javascript">addEventListener</code> to achieve the same.

<pre><code class="language-markup">
&lt;animate 
  dur="2s" fill="freeze" begin="click"
  repeatCount="1" 
  attributeName="d"
  
  onend="cry()"
  
  values="..." /&gt;
</code></pre>

<pre><code class="language-javascript">
function cry() {
  alert("I'M BATMAN");
}
</code></pre>

Other events include <code class="language-javascript">onbegin</code> which is obviously triggered when the animation starts, and <code class="language-javascript">onrepeat</code>, which counts the number of interations the animation has run and fires every time one iteration is complete.

<h3>Result</h3>

Start the animation by clicking or tapping the bat!

<p class="img-holder" id="ex5">
<svg id="svg1" width="600" height="300" class="responsive-svg" ><script>function cry() {alert("I'M BATMAN");}</script><path id="pathex5" d="M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z" fill="#000000"><animate id="animationex5" dur="2s" fill="freeze" begin="click" onend="cry()" repeatCount="1" attributeName="d" values="M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z;M 212,220 C 197,171 156,153 123,221 109,157 120,109  159,63.6 190,114  234,115  254,89.8 260,82.3 268,69.6 270,60.3 273,66.5 275,71.6 280,75.6 286,79.5 294,79.8 300,79.8 306,79.8 314,79.5 320,75.6 325,71.6 327,66.5 330,60.3 332,69.6 340,82.3 346,89.8 366,115  410,114  441,63.6 480,109  491,157 477,221 444,153 403,171 388,220 366,188 316,200 300,248 284,200 234,188 212,220 Z;"/></path></svg</p>

Again, this will work only if the SVG is included directly in your DOM.


<h3>Feature test</h3>

As you all know, we just should feature detect to check if we're able to use SMIL. However, it might be that you get a false positive in IE9, according to this (somewhat old) <a href="https://github.com/Modernizr/Modernizr/issues/356">Modernizr issue</a>, so be aware!

With that one you can detect SMIL:

<pre><code class="language-javascript">
return !!document.createElementNS('http://www.w3.org/2000/svg', 'animate');
</code></pre>

Place it in a try-catch block! To check for event callbacks, this is how it <em>should</em> work.

<pre><code class="language-javascript">
var el = document.createElementNS('http://www.w3.org/2000/svg', 'animate');
return !!el.onend;
</code></pre>

However, not even Firefox provides interfaces in their DOM API. This is a workaround: Add an almost empty SVG markup to your DOM and have it call a function once it starts. In this function, set your bools or classes, or whatever you like or need.

<pre><code class="language-javascript">
function smilEventsSupported() {
  //set classes or whatever
}

//can be any element
document.body.innerHTML += '&lt;svg width="0" height="0"&gt;'
  + '&lt;path d="m 1,1 1,1 0,0"&gt;'
  + '&lt;animate values="m 0,0 0,0 0,0"'
  + 'attributeName="d" begin="0s" repeatCount="0"' 
  + 'onbegin="smilEventsSupported()"/&gt;'
  + '&lt;/path&gt;&lt;/svg&gt;'
</code></pre>


<h2>Bottom line</h2>

This blog entry is based on about a weekend of research on that topic, fooling and playing around with values and constantly checking the <a href="http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html#SMIL_animations">specification</a>. And I'm sure that I just scratched the surface! I stumpled upon parameters such as <code class="language-markup">keytimes</code>, <code class="language-markup">keyspines</code> or <code class="language-markup">calcMode</code>, which I didn't read in depth. Also the possibility of an <code class="language-markup">animationPath</code> is available, where I've no bloody clue how they can be created whatsoever. SVG animations are a beast of their own, and very powerful once you understand them.

Use is limited, tough. Microsoft has no plans of including SMIL in their current versions of IE. The spec has been out there for a while, but even the preview version of IE11 shows no sign of implementation. Furthermore, if you want to use that stuff on mobile browsers, be aware that performance might be below your expectations. Even iOS Safari, which is still one of the most performant mobile browsers out there, has a clear performance issue when it comes to basic tweening. It's not as bad as animating with RaphaëlJS, tough, because there you just won't get any animation at all.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2013-07-16 20:50:41</wp:post_date>
		<wp:post_date_gmt>2013-07-16 18:50:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>basic-svg-path-tweening-with-smil</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="animations"><![CDATA[Animations]]></category>
		<category domain="post_tag" nicename="batman"><![CDATA[Batman]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="smil"><![CDATA[SMIL]]></category>
		<category domain="category" nicename="svg"><![CDATA[SVG]]></category>
		<category domain="post_tag" nicename="svg"><![CDATA[SVG]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2471</wp:comment_id>
			<wp:comment_author><![CDATA[Digital Visions 2013 | frontend technology talk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://fettblog.eu/blog/2013/10/10/digital-visions-2013/</wp:comment_author_url>
			<wp:comment_author_IP>81.19.145.238</wp:comment_author_IP>
			<wp:comment_date>2013-10-10 11:49:03</wp:comment_date>
			<wp:comment_date_gmt>2013-10-10 09:49:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Animated Batman logos in SVG? Look here! [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381398543.6579380035400390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381398601.0810730457305908203125;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Using assemble.io with yeoman.io&#039;s webapp Gruntfile</title>
		<link>https://fettblog.eu/blog/2013/09/02/using-assemble-io-with-yeoman-ios-webapp-gruntfile/</link>
		<pubDate>Mon, 02 Sep 2013 09:54:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=421</guid>
		<description></description>
		<content:encoded><![CDATA[<p>With <a href="http://h5bp.github.io/Effeckt.css/dist/">Effeckt.css</a> I discovered <a href="http://assemble.io/">assemble.io</a>, a node-based static site generator for … well … assembling HTML files from different parts.</p>

<p>A tool like that was much needed by our department once we switched from an inconvenient clutter of Ant builds, PHP includes, CodeKit and command line calls to our yeoman/grunt setup, so I gave it a try. And I was stunned how easy the set up was and how perfect it fits into the environment we created based upon yeoman's web app generator.</p>

<p>In this short article, I'll show you how you can use assemble.io with Handlebars templates and the basic yeoman.io web app generator Gruntfile.</p>

<!--more-->

<h2>The Basics</h2>

<p>When compiling, assemble.io clutches together bits and pieces from three different resource groups:</p>

<ul>
<li>Layouts: The basic layouts, with all the basic HTML setup, navigations, wrappers, and so on.</li>
<li>Pages: Every page without the clutter around it. Just the "content" of a site</li>
<li>Partials: Reusable Modules that can be included with different parameters on any of the above. Partials can also include other partials.</li>
</ul>

<p>The assembling process goes as follows: Every page is included into a layout, with partials completing everything in-between.</p>

<h3>Layouts</h3>

<p>A basic layout can be like that:</p>

<pre class="language-markup"><code>
&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;!-- the title from the page --&gt;
    &lt;title&gt;{{title}}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- Include a nav from partials --&gt;
    {{>nav}}
  
  &lt;div class="wrapper"&gt;
    &lt;!-- The body of the page --&gt;
    {{>body}}
  &lt;/div&gt;

    &lt;!-- Another partial --&gt;
    {{>footer}}
    
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>We already included some partials (navigation and footer), as well as some parts we define later in the pages. Either with parameters (title) or with content (body).</p>

<h3>Pages</h3>

<p>With the whole HTML layout in the layout modules, a page is a lot cleaner. It defines parameters in a sort of setup header, after that there's the content that is included when calling <code class="language-stuff">{{> body}}</code></p>

<pre class="language-markup"><code>
---
title: About
---
&lt;h1&gt;About everything&lt;/h1&gt;

&lt;p&gt;Lorem Ipsum is not good for content&lt;/p&gt;
&lt;ul&gt;
  ...
&lt;/ul&gt;
</code></pre>

<p>Easy!</p>

<h3>Partials</h3>

<p>I guess you get the idea by now… I'll cover the usage of parameters and stuff sometime later. This is all about the grunt setup.</p>

<h3>Folder structure</h3>

<p>For our websites, those module categories do have separated folders in a template folder in our app directory:</p>

<pre class="language-stuff"><code class="language-stuff">
    app
      |-- templates
          |-- layouts
          |-- pages
          |-- partials
</code></pre>

<h2>Adding it to yeoman.io's webapp Gruntfile</h2>

<p>yeoman.io's webapp setup is the best way to start any web related project. Plus, the generator can be easily adapted to be used with your workflow in particular (I guess this will also be an article for later).</p>

<p>Anyhow: The cool thing with its Gruntfile is, that you not only get compiling and building done, but also have some sort of developing environment, where you can easily access all the files in it's plain source, unminified and as-is. We will now setup grunt for both the building process, as well as the "grunt server" task for your dev environment.</p>

<h3>assemble.io setup</h3>

<p>First of all: Be sure to install assemble correctly after scaffolding your web app:</p>

<pre class="language-"><code>
yo webapp
npm install --save-dev assemble
</code></pre>

<p>Open your Gruntfile.js, and add assemble right after defining the module:</p>

<pre class="language-javascript"><code>

module.exports = function (grunt) {
  grunt.loadNpmTasks('assemble');
  …
};

</code></pre>

<p>With that done, we can do the basic setup for the assemble task. Just add this part anywhere inside the <code class="language-stuff">.initConfig</code> scope:</p>

<pre class="language-javascript"><code>

assemble: {
  options: {
    flatten: true,
    layout: 'layout.hbs',
    layoutdir: '&lt;%= yeoman.app %&gt;/templates/layouts',
    assets: 'dist/images',
    partials: ['&lt;%= yeoman.app %&gt;/templates/partials/*.hbs']
  },
  …
}

</code></pre>

<p>Pretty self-explanatory. We'll define the location of layout, partials, and some other stuff which you can ignore for now. Note that partials can be an array of folders, make use of that.</p>

<h3>grunt build</h3>

<p>Before we'll check on the (oh so sweet) on the fly compiling when spawning a project dependent server, we just check on how to compile this baby when creating a build.</p>

<p>With the setup being complete, just add a line for the "dist" target. This is yeoman's default target for anything building and distribution related.</p>

<pre class="language-javascript"><code>
assemble: {
  options: {
    flatten: true,
    layout: 'layout.hbs',
    layoutdir: '&lt;%= yeoman.app %&gt;/templates/layouts',
    assets: 'dist/images',
    partials: ['&lt;%= yeoman.app %&gt;/templates/partials/*.hbs']
  },
  dist: {
    files: {
      '&lt;%= yeoman.dist %&gt;/': ['&lt;%= yeoman.app %&gt;/templates/pages/*.hbs']
    } 
  }
}
</code></pre>

<p>We have defined layouts and partials in the setup, the dist-target tells us where pages are located and where the assembled output should land. It's pretty straightforward: Just put all the pages in <code class="language-stuff">&lt;%= yeoman.dist %&gt;/</code>, the output directory of the build process.</p>

<p><strong>Note:</strong> This can create some conflicts if you're using the <code>htmlmin</code> task, since it tries for itself to copy everything HTML related from <code class="language-stuff">&lt;%= yeoman.app %&gt;/</code> to <code class="language-stuff">&lt;%= yeoman.dist %&gt;/</code>. Just put everything done by assemble into a temporary directory, and let <code class="language-stuff">htmlmin</code> (which strangely never worked for me…) fetch the files from there:</p>

<pre class="language-javascript"><code>
assemble: {
  options: {
    flatten: true,
    layout: 'layout.hbs',
    layoutdir: '&lt;%= yeoman.app %&gt;/templates/layouts',
    assets: 'dist/images',
    partials: ['&lt;%= yeoman.app %&gt;/templates/partials/*.hbs']
  },
  dist: {
    files: {
      '.tmp': ['&lt;%= yeoman.app %&gt;/templates/pages/*.hbs']
    } 
  }
}
</code></pre>

<pre class="language-javascript"><code>
htmlmin: {
  dist: {
    options: {
    },
    files: [{
      expand: true,
      cwd: '.tmp',
      src: '*.html',
      dest: '&lt;%= yeoman.dist %&gt;'
    }]
  }
},
</code></pre>

<p>Voilà, you're done.</p>

<h3>grunt server</h3>

<p>Now for the fun part: Having it compiled on the fly while changing your source files, and live reload it in your browser.</p>

<p>This part of the yeoman Gruntfile actually got me interested into the scaffolding tool in the first place, since it's a LOT more convenient to have your changes displayed directly after doing them. No matter if it's in Sass, HTML or JavaScript.</p>

<p>To achieve that, grunt creates a TMP directory where it puts all compiled stuff into. The server also points to that directory. So for having our HTML files assembled, just add this line of code to our assemble setup:</p>

<pre class="language-javascript"><code>
assemble: {
  …
  server: {
    files: {
      '.tmp/': ['&lt;%= yeoman.app %&gt;/templates/pages/*.hbs']
    } 
  }
}
</code></pre>

<p>If you start your server the first time, all pages are compiled and available. If you want to update your server anytime a <code class="language-stuff">*.hbs</code> file changes, add the following line to the <code class="language-stuff">watch</code> task:</p>

<pre class="language-javascript"><code>
watch: {
  … 
  assemble: {
   files: ['&lt;%= yeoman.app %&gt;/templates/layouts/*.hbs',
           '&lt;%= yeoman.app %&gt;/templates/pages/*.hbs',
           '&lt;%= yeoman.app %&gt;/templates/partials/*.hbs'],
   tasks: ['assemble:server']
  }
},
...
</code></pre>

<p>Which actually just says: If anything changed in our layout/pages/partials folder, execute the assemble task again!</p>

<p>To have the changes displayed without refreshing, tell livereload to have a look at the HTML files compiled into the TMP directory of the server:</p>

<pre class="language-javascript"><code>

watch: {
  …
  livereload: {
    options: {
      livereload: LIVERELOAD_PORT
    },
    files: [
      '.tmp/*.html', // Add this
      … 
    ]
  }
},

</code></pre>

<p>And you're done! Enjoy!</p>

<h2>Update</h2>

<p>I got some great feedback in the comments. Thank you guys, you're amazing! Here are some issues I forgot to address:</p>

<p>Peter pointed out that with the current setup, <code>usemin</code> won't be able to run through your code and compile scripts and style files. You can either point the <code>useminPrepare</code> task to one of the template or partial files, or you just direct them to the <code>.tmp</code> directory:</p>

<pre><code class="language-javascript">
useminPrepare: {
  options: {
    dest: '<%= yeoman.dist %>'
  },
  html: '.tmp/index.html'
},
</code></pre>

<p>Just run <code>useminPrepare</code> after <code>assemble</code>, which I forgot to add anyways. Thanks Sarith for pointing me onto that one!</p>

<pre><code class="language-javascript">
...
  concurrent: {
    server: [
      'compass',
      'jst',
      'assemble'
    ],
    dist: [
      'compass',
      'jst',
      'assemble',
      'imagemin',
      'svgmin'
    ]
  }
...

grunt.registerTask('build', [
  'clean:dist',
  'concurrent:dist',
  'useminPrepare',
  'concat',
  'cssmin',
  'uglify',
  'copy:dist',
  'usemin'
]);
</code></pre>

Thanks again for the great feedback! I really appreciate it!

<h2>Bottom line</h2>

<p>Grunt and yeoman are found their way into our development process rather quickly, and I think assemble.io will also be a part in our development future.</p>

<p>Setting up was rather easy and took me -- including research on how to use this in the first place -- about half an our. Plus, assemble.io solves major issues we faced after switching to yeoman+grunt:</p>

<ul>
<li>PHP includes weren't possible anymore, with assemble we can put template parts in separated files again</li>
<li>With the much cleaner Handlebars syntax it's possible to prepare those modules for a later refining, e.g. to produce TYPO3/Wordpress/Name-your-CMS modules.</li>
</ul>

<p>If your website deployment is based upon yeoman and/or grunt, you should definitely give it a try.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2013-09-02 11:54:21</wp:post_date>
		<wp:post_date_gmt>2013-09-02 09:54:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-assemble-io-with-yeoman-ios-webapp-gruntfile</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="assemble-io"><![CDATA[assemble.io]]></category>
		<category domain="post_tag" nicename="grunt"><![CDATA[Grunt]]></category>
		<category domain="post_tag" nicename="static-site-generator"><![CDATA[static site generator]]></category>
		<category domain="category" nicename="tools"><![CDATA[Tools]]></category>
		<category domain="category" nicename="workflows"><![CDATA[Workflows]]></category>
		<category domain="post_tag" nicename="yeoman"><![CDATA[yeoman]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Using grunt-connect-proxy</title>
		<link>https://fettblog.eu/blog/2013/09/20/using-grunt-connect-proxy/</link>
		<pubDate>Fri, 20 Sep 2013 10:37:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=440</guid>
		<description></description>
		<content:encoded><![CDATA[<p>With any application that communicates with some sort of backend interface exchanging JSON data, you're often in the need to use proxies in your own server configuration to overcome CORS restrictions (either that, or use jsonp, which always seems like a workaround to me). Previously --- in the times we worked with our local Apache servers -- it was always a bit tedious and also caused a lot of time running into the project setup for every team member. Now with our yeoman-grunt-bower setup, it mostly takes no longer than a minute. Cause guess what, there's a already Grunt-task for that.</p>

<!--more-->

<h2>The problem</h2>

<p>Why do we need proxies? Well, I assume your app uses JSON for data transfer, so by calling an URL like <code>http://someserver.com/API/Login</code> you get all the data you need for your JavaScript application. And in most cases your application is located on the same server, which makes those calls really easy. However, if your are developing locally on your machine and try to call this server, you'll soon see that you won't come very far. Due to <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a> restrictions you are not allowed to retrieve data from a different domain than yours.</p>

<p>Proxies help with that. They stand in for the server you want to reach, get the required data, while letting your browser think that you're all in the right domain. So instead by calling <code>http://someserver.com/API</code> you can call <code>http://localhost/API</code>.</p>

<h2>Creating a proxy with Grunt</h2>

<p>Task-runner Grunt has quickly become my most favorite tool when it comes to front-end development. It builds up on Node.js, which allows me to easily create new tasks, plus there are already a lot of great tasks out there which help me with my everyday development. Also for proxies, like the one created by <a href="https://github.com/drewzboto/grunt-connect-proxy">Drewzboto</a>.</p>

<p>Recently we switched our scaffolding process from a GitHub clone clusterf**k to a more streamlined process with Bower and Yeoman, and Yeoman heavily uses Grunt. So this short tutorial will show you how to add a proxy to your already existing Yeoman-like Gruntfile (with <code>connect</code> and <code>livereload</code> already set in place.</p>

<h3>Installing</h3>

<p>Coulnd't be easier. Just type</p>

<pre><code class="language">
npm install --save-dev grunt-connect-proxy
</code></pre>

<p>With the parameter <code>--save-dev</code> the module gets added to your <code>package.json</code>, the one file you have to make available in your code repository for your co-developers.</p>

<h3>Setting up a proxy</h3>

<p>Search your <code>connect</code> task in your Gruntfile and add this little snippet:</p>

<pre><code class="language">
connect: {
    ...
    server: {
        proxies: [
            {
                context: '/',
                host: 'someserver.com',
                changeOrigin: true
            }
        ]
    }
}
</code></pre>

<p>This snippet tells us, that any call which can't be answered by your machine will be forwared to <code>someserver.com</code>. There are a lot more options, you might also need <code>https</code> or <code>port</code> parameters for instance. Check out <a href="https://github.com/drewzboto/grunt-connect-proxy">the GitHub repo</a> for more information on that.</p>

<p>Add this part to the top of your <code>Gruntfile.js</code>, right before <code>module.exports</code>.</p>

<pre><code class="language-javascript">
var proxySnippet = require('grunt-connect-proxy/lib/utils').proxyRequest;
</code></pre>

<p>and call the <code>proxySnippet</code> middleware in your <code>livereload</code> configuration:</p>

<pre><code class="language">
connect: {
    ...
    livereload: {
        options: {
            middleware: function (connect) {
                return [
                    lrSnippet,
                    mountFolder(connect, '.tmp'),
                    mountFolder(connect, yeomanConfig.app),
                    proxySnippet
                ];
            }
        }
    }
}
</code></pre>

<p>Now you're all set up. The last thing you've to do is to call <code>configureProxies</code> before using <code>connect</code> in your task, and everything's ready to go:</p>

<pre><code class="language">
grunt.task.run([
    'clean:server',
    'concurrent:server',
    'configureProxies',
    'connect:livereload',
    'open',
    'watch'
]);
</code></pre>

<p>It's as easy as that. We added this to our main Gruntfile we use for scaffolding our projects, so everytime we need a proxy, it's just peace of cake instead of endless subdomain and subserver configuration in the old <code>httpd-vhosts.conf</code> file.</p>

<h2>Directing to more than one server</h2>

<p>This was actually a part which required a lot more thinking and understanding of proxies to get this done right. We had the -- at least for us -- rather specific use case to retrieve our data from more than one server at the same time. Mainly because there was one server handling the content, and one server which took care of all the user data. As you can see, the <code>proxies</code> option in the default task is actually an array, which means we can easily define more than one proxy configuration.</p>

<pre><code class="language">
connect: {
    ...
    server: {
        proxies: [
            {
                context: '/user',
                host: 'userserver.com',
                changeOrigin: true
            },
            {
                context: '/',
                host: 'someserver.com',
                changeOrigin: true
            }
        ]
    }
}
</code></pre>

<p>Creating the new context <code>user</code> which should allow me to use <code>http://localhost:9000/user</code> to get to <code>http://userserver.com</code>. I put that one before the other on purpose, cause at the moment this will actually do nothing at all.</p>

<p>Reason is that the proxy can't decide why to redirect all the <code>user</code> calls to the other service. We need to define a redirection for the original proxy to make this happen:</p>

<pre><code class="language">
connect: {
    ...
    server: {
        proxies: [
            {
                context: '/user',
                host: 'userserver.com',
                changeOrigin: true
            },
            {
                context: '/',
                host: 'someserver.com',
                changeOrigin: true,
                rewrite: {
                   '/user' : '/user'
                }
            }
        ]
    }
}
</code></pre>

<p>This rewrite rule tells the proxy that ever call which starts with <code>user</code> gets redirected to the <code>user</code> context we defined earlier. It won't work the other way round, since the context has to be defined beforehand, but that shouldn't matter actually. Feel free to include as many proxies and rewrites. Using this structure everything should work fine.</p>

<h2>Bottom line</h2>

<p>I've to admit that I've grown on Grunt. Not only that everything just seams so easy to create, it's also one definition that works on every workstation in our department. No need for petty set up phases, just everything is on the go and ready if another team member joins a project. Proxies have been the crux for each project, often leading us to switch to JSONP files just for convenience, and because the Backend guys could actually implement that much, much quicker. No need for that anymore.</p>

<h2>Update</h2>

In the meantime Grunt's interfaces have changed and Yeoman's generators use the new <code>grunt-contrib-connect package</code> instead of the deprecated <code>grunt-connect</code> one that has been used before. This package includes livereload as a default, though it's not that easy anymore to add middleware than it was before. I addressed this topic in my recent article on <a href="https://fettblog.eu/blog/2013/11/17/the-magic-of-grunt-contrib-connect-and-how-to-run-php-with-it/">The magic behind grunt-contrib-connect</a>. Check it out and add your proxySnippet where it belongs!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>440</wp:post_id>
		<wp:post_date>2013-09-20 12:37:26</wp:post_date>
		<wp:post_date_gmt>2013-09-20 10:37:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-grunt-connect-proxy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="grunt"><![CDATA[Grunt]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="category" nicename="tools"><![CDATA[Tools]]></category>
		<category domain="category" nicename="workflows"><![CDATA[Workflows]]></category>
		<category domain="post_tag" nicename="yeoman"><![CDATA[yeoman]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2482</wp:comment_id>
			<wp:comment_author><![CDATA[The magic of grunt-contrib-connect, and how to run PHP with it | frontend technology talk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://fettblog.eu/blog/2013/11/17/the-magic-of-grunt-contrib-connect-and-how-to-run-php-with-it/</wp:comment_author_url>
			<wp:comment_author_IP>81.19.145.238</wp:comment_author_IP>
			<wp:comment_date>2013-11-17 17:14:36</wp:comment_date>
			<wp:comment_date_gmt>2013-11-17 15:14:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] of third party middleware, one of the most popular ones being mentioned connect-livereload, or the proxy middleware we bespoke earlier [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1384701293.36641407012939453125;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1384701276.4252688884735107421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Digital Visions 2013</title>
		<link>https://fettblog.eu/blog/2013/10/10/digital-visions-2013/</link>
		<pubDate>Thu, 10 Oct 2013 09:48:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=454</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Last friday <a href="http://liechtenecker.at">Jürgen Liechtenecker and company</a> held the Digital Visions conference in Vienna for the second time. I was invited to speak and got the amazing opportunity to try out a new talk in front of an interested crowd. Digital Visions quickly became the no. 1 meeting point for all Front End devs and UX people in Austria, and I was not only happy to see a lot of familiar faces from Linz and Vienna, but also meet cab sharing buddy <a href="http://maddesigns.de">Sven Wolfermann</a> again. He's an amazing speaker and combines true "Berliner Schnauze" with a lot of interesting information. Have fun in Amsterdam, pal, see you in Düsseldorf at the latest!</p>

<!--more-->

<p class="img-holder">
  <a href="https://fettblog.eu/wp-content/uploads/2013/10/crowd.jpg"><img src="https://fettblog.eu/wp-content/uploads/2013/10/crowd-300x199.jpg" alt="crowd" width="300" height="199" class="alignnone size-medium wp-image-465" /></a>
</p>

<p>I was also happy to meet <a href="http://pragenanz.de">Gerrit van Aaken</a> and <a href="http://intuio.at">Thomas Nägele</a>, who were among the speakers. Great guys who shared a lot of interesting thoughts on the current state of the web. Gerrit was all about web typography and gave truly good information on how to use web fonts correctly and explained why some things just suck. If you know German, check out his <a href="http://webtypobuch.de">amazing book</a>. This comprehensive write-up cleared (respectively supported) all my doubts on font hosting services. Plus he was really interested in everything that happened at the conference and provided some good discussions.</p>

<p class="img-holder">
  <a href="https://fettblog.eu/wp-content/uploads/2013/10/thomas.jpg"><img src="https://fettblog.eu/wp-content/uploads/2013/10/thomas-300x199.jpg" alt="thomas" width="300" height="199" class="alignnone size-medium wp-image-460" /></a>
</p>

<p>Thomas on the other hand supported the philosophy that designers should code and work in the browser. I loved how he explained his design workflow and showed again that designing/deciding in the browser is not only fancy but a necessity. And he gave a lot of connecting points to my talk. Thank you for that, mate!</p>

<p>I really loved being there. It was motivating and inspirational. Thanks to Jürgen, Sue, Christoph, Stephan, Sarah and co. for creating an awesome event. Would love to join again next year!</p>

<p>Oh, and on a side note: Andreas, Thomas, Kev: Nice post-conference beer. Should do that again!</p>

<h2>Coverage</h2>

<p>For full coverage check out <a href="http://lanyrd.com/2013/div13/">their Lanyrd page</a>. Here are some sources and additional information to my talk "The perfect Steak"</p>

<ul>
<li>I got most of the browser icons from <a href="https://github.com/paulirish/browser-logos">Paul Irish</a></li>
<li>Open Signal gave a good overview of <a href="http://opensignal.com/reports/fragmentation-2013/">Android Fragmentation</a></li>
<li>Phil Hawksworth wrote extensively about moto.oakley.com, mostly in <a href="http://hawksworx.com/blog/oakleys-monster-page-of-baubles/">this article</a> and in <a href="http://hawksworx.com/blog/oakleys-moto-diet/">Oakley's Moto diet</a></li>
<li>Buddy Tim Kadlec wrote about <a href="http://timkadlec.com/2013/01/windows-phone-8-and-device-width/">Windows Phone 8's viewport dillema</a></li>
<li>One of the best Tumblrs out there: <a href="http://sighjavascript.tumblr.com/">Sigh, JavaScript</a></li>
<li>Animated Batman logos in SVG? <a href="https://fettblog.eu/blog/2013/07/16/basic-svg-path-tweening-with-smil/">Look here!</a></li>
<li>Working Draft <a href="http://workingdraft.de/135">Revision 135: Progressive Enhancement</a> and <a href="http://workingdraft.de/137">Revision 137: Mobile Browser Bugs</a> are in German</li>
<li>So is Svens excellent article on <a href="http://maddesigns.de/meta-viewport-1817.html">Viewports</a></li>
<li>Luke Wilson on Facebook and Twitter <a href="http://www.lukew.com/ff/entry.asp?1801">as top used browsers</a></li>
<li>Some love for <a href="https://github.com/ddprrt/troll.css/tree/master">troll.css</a></li>
</ul>

<p class="img-holder">
  <a href="https://fettblog.eu/wp-content/uploads/2013/10/mespeaking.jpg"><img src="https://fettblog.eu/wp-content/uploads/2013/10/mespeaking-300x199.jpg" alt="mespeaking" width="300" height="199" class="alignnone size-medium wp-image-463" /></a>
</p>

<p>You can find the slides on <a href="https://speakerdeck.com/ddprrt/digital-visions-2013-the-perfect-steak">Speakerdeck</a>. Fotos are done by the Liechteneckers. Check out their <a href="https://www.facebook.com/media/set/?set=a.575130642546430.1073741829.514203818639113&amp;type=1">Facebook page for more</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2013-10-10 11:48:56</wp:post_date>
		<wp:post_date_gmt>2013-10-10 09:48:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>digital-visions-2013</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="conference"><![CDATA[Conference]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="responsive-webdesign"><![CDATA[Responsive Webdesign]]></category>
		<category domain="post_tag" nicename="ux"><![CDATA[UX]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>It&#039;s all about the content!</title>
		<link>https://fettblog.eu/blog/2013/10/11/its-all-about-the-content/</link>
		<pubDate>Fri, 11 Oct 2013 14:44:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=469</guid>
		<description></description>
		<content:encoded><![CDATA[<p>You know parallel scrolling websites? The kind where big sunglasses assemble themselves, break through rocks and crash your browser? The kind everyone loves. Except developers. Today I found <a href="http://thereisnopagefold.com">thereisnopagefold.com</a> by <a href="http://twitter.com/coda_za">Damien du Toit</a>, who had his own opinion on the whole thing. Check it out.</p>

<!--more-->

<h2>It all burns down to one thing</h2>

<p>Of course, while amusing myself, I got my "Nays". By stating "it's all about the content", <a href="http://twitter.com/helpstring">Andreas Ostheimer</a> reacted in that way:</p>

<blockquote>
  <p>No it's not. It's all about Marketing. No it's not. It's about a lot of things but NOT one single thing.</p>
</blockquote>

<p>I'm very sorry for you, but here it's a clear "Yes, it is!". No matter from which side you access or co-create the web, everything burns down to delivering content.</p>

<p>If you are on the marketing side, your expertise is worthless if you don't think about the contents you are going to promote. If you are a designer, all your skills are used to find the best presentation for the content you want to deliver. If you don't get the message right, your sense of beauty won't help you. Colours, typeface, images and effects all have to fit the purpose of presenting the webpages content.</p>

<p>This also goes for developers: Before you apply any JavaScript magic make sure that the content you want to add behaviour to is there. Think about editors and users. Every tweet posted, every Instagram taken and every video on YouTube is content in its purest form. And just the <em>rest</em> is about presentation.</p>

<p>So "Content First" is not only a strategy for designers and conception staff, it is for every participant in a web project!If you don't pay attention to the "What", you won't find the right "How" to transport it.</p>

<p>Neglecting content makes all the efforts pointless. Content is the starting point, the solid ground, the base, the one thing everything burns down to.</p>

<p>And nobody knew that better than Damian in creating <a href="http://thereisnopagefold.com">thereisnopagefold.com</a>, on all the levels. He had a message to deliver, he had content he cared about, and he used the best way possible to present and undermine his point. By support people that are annoyed with parallax scrolling websites and annoy (?) people who love them. This is what he wanted to transport. I'm pretty sure that these are the reactions he wanted to have!</p>

<h2>Agency porn vs. Progressive Enhancement</h2>

<p>While I'm not a big fan of parallax scrolling webpages, I wouldn't say that I don't get the point <em>why</em> agencies are so fond of creating them and presenting content in that particular way. You can do awesome stuff and really strengthen certain points of your message. For instance, I love the recently launched <a href="http://mario.ign.com">Museum of Mario</a>, who was created by the HTML5Hub in cooperation with IGN. This is a perfect example of how awesome this stuff can be. Tough I would've loved to get at least the text boxes readable without JavaScript. I'm all for pushing the boundaries of the web and creating awesome experiences!</p>

<p>But not by violating the basic principle of the web. The web is for everyone. Content has to be delivered to everyone. And you cannot know what literally <em>everyone</em> is going to use to access your web page.</p>

<p>So prepare for the unknown. Prepare by providing a solid base, the content, and make sure that at least the content is accessible! And just <em>then</em> enhance progressively to the platforms you (think you) can control.</p>

<p>A designer first is concerned about the message, then about its presentation, and only later about its behaviour. And developers can express this thought process in code. And they just have to.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date>2013-10-11 16:44:09</wp:post_date>
		<wp:post_date_gmt>2013-10-11 14:44:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>its-all-about-the-content</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="content-first"><![CDATA[Content First]]></category>
		<category domain="post_tag" nicename="parallax-scrolling"><![CDATA[Parallax Scrolling]]></category>
		<category domain="post_tag" nicename="progressive-enhancement"><![CDATA[Progressive Enhancement]]></category>
		<category domain="category" nicename="rant"><![CDATA[Rant]]></category>
		<category domain="post_tag" nicename="rant"><![CDATA[Rant]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Great Scott! Five lesser known shortcuts for Emmet.io that rock!</title>
		<link>https://fettblog.eu/blog/2013/10/16/great-scott-five-lesser-known-shortcuts-for-emmet-io-that-rock/</link>
		<pubDate>Wed, 16 Oct 2013 19:17:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=482</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I'm a huge fan of <a href="http://emmet.io">Emmet</a>. It allows you not only to create markup in no-time by using a CSS-like syntax in your most favourite code editor (e.g. <code>ul&gt;li*5</code> expands to one <code>&lt;ul&gt;</code> element with five nested <code>&lt;li&gt;</code> elements in HTML after hitting the tab key. Alternatively, you can just type <code>m20</code> in your CSS to get <code>margin: 20px</code> after hitting tab).</p>

<p>If you don't have Emmet, check out the list of <a href="http://emmet.io/download/">available plugins</a> and install it right now. Or if you want to just give it a try <a href="http://codepen.io">Codepen</a> also implements Emmet in their CSS and HTML views.</p>

<p>Here a the five shortcuts, that not only surprised me most, but also boosted my productivity up to eleven!<!--more--></p>

<p class="img-holder">
  <img src="http://upload.wikimedia.org/wikipedia/en/9/97/Doc_Brown.JPG" />
</p>

<h2>CSS: bxsd -- txs</h2>

<p>I never can remember the values for both the <code>box-shadow</code> and <code>text-shadow</code> properties in CSS. I know them a little, but I always have to try it out first in dev tools. But if I type</p>

<pre><code>bxsd
</code></pre>

<p>and hit the tab key, I get this snippet inserted in my CSS code:</p>

<pre><code class="language-css">-webkit-box-shadow: inset hoff voff blur color;
-moz-box-shadow: inset hoff voff blur color;
box-shadow: inset hoff voff blur color;
</code></pre>

<p>Wohoo! Just need to adapt the values (Sublime does multi-cursor, too) and I'm all done.</p>

<p>In Codepen, <code>bxs</code> does the same, just Sublime needs an extra <code>d</code>. SCNR.</p>

<p>Same goes for <code>text-shadow</code>. A simple</p>

<pre><code>txs
</code></pre>

<p>expands to</p>

<pre><code class="language-css">text-shadow: hoff voff blur #000;
</code></pre>

<p>I don't use prefixed <code>box-shadow</code> anymore, but deleting lines is always a lot easier than typing each value on its own.</p>

<h3>Update</h3>

<p>The guys from Emmet told me via Twitter, that you can update your <a href="http://docs.emmet.io/customization/preferences/">preferences</a> to disable certain prefixes. Thank you, guys!</p>

<h2>HTML: lorem</h2>

<p>You know what</p>

<pre><code>p*5>lorem
</code></pre>

<p>does? Exactly that. It inserts five paragraphs of Lorem Ipsum.</p>

<pre><code>p*5>ipsum
</code></pre>

<p>does the same. You know that <a href="http://www.youtube.com/watch?v=eB2p4UPXY1k">Lorem Ipsum is fucking evil</a>, and I'm absolutely behind that. But to check if your design holds a massive amount of text, there's no easier way to do that.</p>

<p>If you just need it every once in a while, type <code>lorem</code> or <code>ipsum</code> to get just one paragraph.</p>

<h2>CSS: bz</h2>

<p>box-sizing is at the moment the only CSS property that I still prefix. It's mostly (I even think just) used for layout tasks, and leaving it unprefixed would cause issues on older Android browsers. Writing all prefixed properties is cumbersome, so before using Emmet, I included a little Sass mixing that came with Bootstrap:</p>

<pre><code class="language-css">@mixin box-sizing($val: border-box) {
    -webkit-box-sizing: $val;
    -moz-box-sizing: $val;
    box-sizing: $val;
}
</code></pre>

<p>to use with:</p>

<pre><code class="language-css">@include box-sizing();
</code></pre>

<p>It's okay, but I always find mixins kinda laborious, especially if they just prefix stuff. Emmet knows, that if you want to add <code>box-sizing</code> in your CSS, you might just have one and only one desire: Set it to <code>border-box</code> for all available platforms. So if you type:</p>

<pre><code>bz
</code></pre>

<p>it expands to</p>

<pre><code>-webkit-box-sizing: border-box;
-moz-box-sizing: border-box;
box-sizing: border-box;
</code></pre>

<p>after hitting the tab key. Great, all I need and just by typing two letters!</p>

<h2>CSS: lg()</h2>

<p>Another thing that I always used a mixin for was linear gradients. Mostly because specification changed over and over, and after having almost the same implementation across all platforms, the very first value describing the direction got changed by a W3C specification. If you know German, check out <a href="http://www.peterkroener.de/aenderungen-in-der-neuen-css3-farbverlauf-syntax-ohne-vendor-prefix/">buddy Peter's cents on that topic</a>. Anyhow, I never gave much ado about it, and mostly used a tool or a mixin for that task.</p>

<p>But with <code>lg</code> in Emmet, everything seems so much, much easier.</p>

<p>Typing</p>

<pre><code class="language-css">lg(left, #bada55 60%, #c0ffee)
</code></pre>

<p>and hitting tab, results in</p>

<pre><code class="language-css">background-image: -webkit-gradient(linear, 0 0, 100% 0, color-stop(0.6, #bada55), to(#c0ffee));
background-image: -webkit-linear-gradient(left, #bada55 60%, #c0ffee 100%);
background-image: -moz-linear-gradient(left, #bada55 60%, #c0ffee 100%);
background-image: -o-linear-gradient(left, #bada55 60%, #c0ffee 100%);
background-image: linear-gradient(left, #bada55 60%, #c0ffee 100%);
</code></pre>

<p>This does not include the W3C proposed specification, well, at least yet. But I think it will be in a future update. For know, it works, at least for me.</p>

<h2>HTML: !</h2>

<p>My most favourite of all is the <code>!</code> shortcut. I found it especially tedious to create the basic HTML structure, so i used a lot of HTML boilerplate code and created some snippets for sublime. Emmet just needs a little</p>

<pre><code>!
</code></pre>

<p>at the start of a line in your HTML, and you get this:</p>

<pre><code class="language-markup">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/html&gt;
</code></pre>

<p>with the cursor pointing to the start of the <code>&lt;title&gt;</code> tag (which is by the way the thing I forget most when creating new sites). This is heavy!</p>

<h2>Also interesting</h2>

<p>If you want to have a complete overview of available Emmet shortcuts, be sure to check out there <a href="http://docs.emmet.io/cheat-sheet/">cheat sheet</a></p>

<p><em>Image: <a href="http://en.wikipedia.org/wiki/File:Doc_Brown.JPG">Wikipedia</a></em></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>482</wp:post_id>
		<wp:post_date>2013-10-16 21:17:27</wp:post_date>
		<wp:post_date_gmt>2013-10-16 19:17:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>great-scott-five-lesser-known-shortcuts-for-emmet-io-that-rock</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="emmet"><![CDATA[Emmet]]></category>
		<category domain="post_tag" nicename="tooling"><![CDATA[Tooling]]></category>
		<category domain="category" nicename="tools"><![CDATA[Tools]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Content vs. value</title>
		<link>https://fettblog.eu/blog/2013/10/21/content-vs-value/</link>
		<pubDate>Mon, 21 Oct 2013 10:38:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=514</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Title's for all content strategists out there who expect something really meta and with a lot of additional bla bla. Well, this is about HTML Content vs. Input Values.</p>

<p>Margin psycho and Sass expert <a href="http://hugogiraudel.com/">Hugo Giraudel</a> (check out his awesome blog, btw!) brought up a pretty sweet <a href="http://codepen.io/HugoGiraudel/pen/19441aa6d183b640154a02eace1b37c4">sample on Codepen</a>, showing an input field resizing it's width depending on the characters typed in, using the new 'ch' unit. The original question was, if there was a CSS only way to recreate this behavior:
<!--more--></p>

<blockquote>
  <p>Do any of you guys think of a pure CSS way to make an input element wrap around its content? I'm not sure it's possible actually.</p>
</blockquote>

<p>And Hugo is completely right, it isn't possible. And that's per definition. <code>input</code> elements are content-less in HTML terms, since they can't hold content like other HTML elements do:</p>

<pre><code class="language-markup">&lt;p&gt;this is content&lt;/p&gt;
&lt;span&gt;this is also content&lt;/span&gt;
&lt;input&gt;IMPOSSIBRU&lt;/input&gt;
</code></pre>

<p>The last one is obviously bogus. Correct way would be <code>&lt;input type="text" value="That is better"&gt;</code>. Auto-width in CSS is only possible with elements that can have content.</p>

<p>If you compare it to other CSS techniques, you'll notice that input elements can't have pseudo elements like <code>:before</code> and <code>:after</code> because of the very same reason. Those two elements are  placed <em>before</em> and <em>after</em> the content of one element:</p>

<pre><code class="language-markup">&lt;p&gt;
 &lt;before goes here&gt;
 Content
 &lt;after goes there&gt;
&lt;/p&gt;
</code></pre>

<p>I'm not sure why <code>input</code>s can't have content. I assume it has something to do with being connected tightly with the Operating System (at least in the past). Maybe you can help me on that one. The <a href="http://dev.w3.org/html5/markup/syntax.html#content-model">spec</a> defines them as void elements which aren't allowed to have content in any way.</p>

<h2>How can you achieve this behavior CSS only?</h2>

<p>Rape accessibility and use a span.</p>

<pre><code class="language-markup">&lt;span contenteditable&gt;
 this is my content
&lt;/span&gt;
</code></pre>

<p>Rape's bad, if you haven't known already. So use Hugo's sample. This should work just fine for you!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>514</wp:post_id>
		<wp:post_date>2013-10-21 12:38:33</wp:post_date>
		<wp:post_date_gmt>2013-10-21 10:38:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>content-vs-value</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="codepen"><![CDATA[Codepen]]></category>
		<category domain="category" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="category" nicename="general"><![CDATA[General]]></category>
		<category domain="category" nicename="html5"><![CDATA[HTML5]]></category>
		<category domain="post_tag" nicename="specification"><![CDATA[Specification]]></category>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Topconf Tallinn 2013</title>
		<link>https://fettblog.eu/blog/2013/11/13/topconf-tallinn-2013/</link>
		<pubDate>Wed, 13 Nov 2013 18:26:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=527</guid>
		<description></description>
		<content:encoded><![CDATA[Last week I attended <a href="http://topconf.com">Topconf</a> in Tallinn, Estonia. It was my very first time in Estonia and also my first time at a conference which wasn't targeted to web developers or designers. Instead, it was a software conference which appealed both hardcore coders and project managers.<!--more-->

And it surprised me, big time! Not completely unrelated to this topics, I still consider myself a rookie in "Agile" and Co., and liked getting some new ideas from the pros. On the other hand I found myself really contributing with a view on the web as an app platform topic, and added a good chunk of fun with the current state of mobile browsers. I like the new intro of my talks which always catches the audience. Can't wait to show that stuff to the Drupal community next week.

<p class="img-holder"><a href="http://pbs.twimg.com/media/BYXoJEmIgAA6Iq9.jpg:large"><img src="http://pbs.twimg.com/media/BYXoJEmIgAA6Iq9.jpg:large" alt="Best conference badge ever" width="512" style="opacity:1 !important" /></a></p>

I held "Mobile Browser Games", possibly for the last time ever, and "Keep Calm and Browse Happy", which showed some tips and techniques to speed up your web app on mobile phones without losing the spirit of Progressive Enhancement. I really enjoyed having a panel discussion with Max Firtman. Though being in the same camp with our opinions, we shared a lot of new ideas with an interested audience. Would love to do that again in the future.

I spent a lot of time with the fellow speakers from abroad and had a blast hanging out with them in sessions, between sessions and after sessions. Mostly with Christoph Engelbert from Germany, who was really funny and a great chap to be with. I had no clue on his talking topics whatsoever, but nonetheless enjoyed his enthusiasm in working, speaking and of course chatting.

Also enjoyed a classy "My programming language is better than yours" discussion from time to time, especially with "Hattori Honza" Kral - who insists people who like JavaScript suffer from "Stockholm Syndrome" (nice one, Honza) - and Nigel Runnels. We coined the term "MontyScript", so if you find a Python preprocessor in the future for you to abandon all sanity, it might have this very name!

<p class="img-holder"><a href="http://pbs.twimg.com/media/BYe_FaOIUAAdczI.jpg:large"><img src="http://pbs.twimg.com/media/BYe_FaOIUAAdczI.jpg:large" alt="Conference after party" width="512" style="opacity:1 !important"/></a></p>

Also in the bunch was Gábor Török. He not only shared some intriguing ideas with, but also proved to be a really nice guy with whom you can enjoy some new beers and have a good laugh. Bro, I'll owe you a drink. Budapest is just a stone throw away from Linz, so prepare for one or more visits in the future!

One of the greatest talks for me was given by Vladimir Agafonkin. If you don't know him, you sure know his work Leaflet.js, the one and only alternative to Google Maps. His talk about spending a good chunk of one's time on Open Source projects and having a lot of success was very inspiring. Plus, he's one of the nicest and most relaxed guys I've ever met.

<p class="img-holder"><a href="http://pbs.twimg.com/media/BYeNtxXIUAAVMB_.jpg"><img src="http://pbs.twimg.com/media/BYeNtxXIUAAVMB_.jpg" alt="Vladimir talking Leaflet" width="512" style="opacity:1 !important"></a></p>

Rachel Laycock not only caught me with her talk on Continuous Delivery, but also with her more personal story of being a professional homeless by living on every corner of the globe. Intriguing story, Rachel, you should sometime talk about just that!

Oh, and Lukas Eder: Too bad we met at the very last minute of Topconf, next time we have to chat a lot more! Same goes for Johan Andrén, who coined the term "abstract hangover". It's exactly what you think it is!

I really hope to see everyone I met once again at a conference or somewhere else. Had a great time with a lot of great people and was pumped with energy and ideas when I came back.

<p class="img-holder"><a href="http://pbs.twimg.com/media/BYXw7lMIgAAuxbg.jpg"><img src="http://pbs.twimg.com/media/BYXw7lMIgAAuxbg.jpg" width="512" alt="Mobile track with Max Firtman and me"  style="opacity:1 !important"/></a></p>

With all the different worlds in software coming closer and closer to each other I really like the idea of talking again about browsers and the web in front of a software engineering audience. Topconf is with its broad scope a great place to get new ideas and truly take a peek beyond your own nose. Chris Frei did a great job in organising the conference and I would love to be part of it some time in the future!

<p class="img-holder"><a href="http://pbs.twimg.com/media/BYaFKdhIEAAuZwr.jpg:large"><img src="https://pbs.twimg.com/media/BYaFKdhIEAAuZwr.jpg:large" alt="Christoph and me having fun" width="512"></a></p>

This week there will be a full round up of this conference at <a href="http://netural.com">Netural</a>, check it out if you want a more content related and less personal view of things.

<em>Image credits: @processpirate @sleepyfox @noctarius2k @ddprrt</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>527</wp:post_id>
		<wp:post_date>2013-11-13 20:26:52</wp:post_date>
		<wp:post_date_gmt>2013-11-13 18:26:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>topconf-tallinn-2013</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="category" nicename="conference"><![CDATA[Conference]]></category>
		<category domain="post_tag" nicename="mobile-browsers"><![CDATA[Mobile Browsers]]></category>
		<category domain="post_tag" nicename="software-engineering"><![CDATA[Software Engineering]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>The magic of grunt-contrib-connect, and how to run PHP with it</title>
		<link>https://fettblog.eu/blog/2013/11/17/the-magic-of-grunt-contrib-connect-and-how-to-run-php-with-it/</link>
		<pubDate>Sun, 17 Nov 2013 15:14:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://fettblog.eu/?p=543</guid>
		<description></description>
		<content:encoded><![CDATA[<p>One of the most loved <a href="http://gruntjs.com">Grunt.js</a> extensions in our team is the ability to spawn a server for your project with the virtual push of a button, and to be able to see all the changes directly in the browser with a little <a href="https://github.com/livereload/livereload-js">Livereload</a> magic. The seemingly endless Apache configuration days seemed to be over, and every front-end dev in our group was happy with the new workflow established. However, from time to time there was the urge to run some little PHP scripts. Not the big apps, mostly an inclusion of CMS managed labels. This need brought me to delve deeper into the mysteries of the connect task. <!--more--></p>

<h2>Behind every great task lies a great program: connect</h2>

<p>What I like a lot about Grunt.js is the fact that it makes Node.js much more accessible. At least for me. I never spent any thought on learning this piece of software, but with the possibilities that Grunt.js brings for the workflow of a big front-end team, taking a look on server-side JavaScripting was inevitable. That's because Grunt.js in its very core just provides a structured and customisable interface to other Node.js programs underneath. The uglify task just starts Uglify.js, compass executes the Compass-Ruby gem, etc.</p>

<p>Same goes for connect. The task you install with <strong>grunt-contrib-connect</strong> just provides an interface to SenchaLab's <a href="http://www.senchalabs.org/connect/">Connect</a> node module. Connect itself is a middleware framework for node's <code>http</code> package. Which means it comes with a lot of standard tasks which you need when creating a server.</p>

<p>Creating a server is already a rather simple task with node, but connect has some really neat built-in middleware for browsing a directory, serving files with the correct mime-type, handle sessions, etc. It also comes with a lot of third party middleware, one of the most popular ones being mentioned <a href="https://github.com/intesso/connect-livereload">connect-livereload</a>, or the <a href="https://fettblog.eu/blog/2013/09/20/using-grunt-connect-proxy/">proxy middleware</a> we bespoke earlier on.</p>

<h2>connect middleware</h2>

<p>So how does this middleware tool work? Rather easy. Connect creates a stack of different middleware tasks and runs through this stack on every request taken. The middleware itself checks if it has something to do with this request, or if the request just has to be passed on to the next middleware in the stack.</p>

<p>The middleware stack is simply an array of middleware functions. To create a middleware for connect, you just have to implement the following interface:</p>

<pre><code class="language-javascript">function myMiddleware(req, res, next) {
  //Magic happens
}
</code></pre>

<p>The <code>req</code> and <code>res</code> object should be familiar with all of you who did create a server with the <code>http</code> module in node once. For all the others, in a nutshell: <code>req</code> represents the request, <code>res</code> the response, i.e. the stuff you want to appear in the browser.</p>

<p><code>next</code> is a function which just calls the next middleware in the stack. Stephen Sugden wrote a <a href="http://stephensugden.com/middleware_guide/">good tutorial</a> on creating middleware with really useful examples. So check that out if you want to know more on that topic.</p>

<p><strong>grunt-contrib-connect</strong> uses two of the built-in middlwares and one third party middleware. Let's check out how it works:</p>

<pre><code class="language-javascript">middleware: function(connect, options) {
    var middlewares = [];
    var directory = options.directory ||
      options.base[options.base.length - 1];
    if (!Array.isArray(options.base)) {
        options.base = [options.base];
    }

    options.base.forEach(function(base) {
        // Serve static files.
        middlewares.push(connect.static(base));
    });

    // Make directory browse-able.
    middlewares.push(connect.directory(directory));
    return middlewares;
}
</code></pre>

<p>Straight-forward, actually. It creates an array where to serve all static files in the defined base-directories (which can be an array of directories, but does not have to). It also uses connect.directory to make the main app directory browsable. This is the most basic server you can get.</p>

<p>Below it injects <strong>livereload</strong>. This tool has become so popular, it found its way into the official grunt-contrib-connect task.</p>

<pre><code class="language-javascript">
// Inject live reload snippet
if (options.livereload !== false) {
  if (options.livereload === true) {
    options.livereload = 35729;
  }
  //put livereload to the first place 
  middleware.unshift(injectLiveReload({port: options.livereload}));
}
</code></pre>

<p>So livereload takes every request, injects a JavaScript snippet when necessary and starts the livereload watcher to communicate between your browser and the the file system. Sweet.</p>

<p>At the time of this writing, it isn't possible to access the middleware array directly from your <strong>Gruntfile.js</strong>. But you can override the middleware function from the task, to create your very own stack of middleware for connect. Alas, this will kill the basic serving of directories and static files. So I suggest to reimplement the middleware function from above and insert your middleware snippets an the appropriate place. We'll get on to that below. The livereload option still will work whatsoever.</p>

<h2>A PHP middleware</h2>

<p>Before we continue, a quick disclaimer: Yeah, we are going to recreate the possibility of serving PHP files, but we won't be able to use all the server variables of PHP like <code>$_SESSION</code> or <code>$_POST</code>. Well, yet. I'm working on that issue, but for basic tasks this should work nonetheless.</p>

<p>So, to make PHP files parseable, we need to do two things:</p>

<ul>
<li>Create a middleware that executes PHP</li>
<li>Include this middleware into our Grunt connect task</li>
</ul>

<p>Even if it's kind of rough, the first part is actually really easy: Every time we get a request to a <code>.php</code> file, we call the php command line interface to parse this file, and write the result into our response:</p>

<pre><code class="language-javascript">
function(req, res, next) {
  if(req.url.endsWith('.php')) {
    exec('php ' + directory + req.url, 
      function callback(error, stdout, stderr){
        if(error) {
          console.error(stderr);
        }
        res.write(stdout);
        res.end();
        return;
    });
   } else {
     // No .php file? Moving on ...
     next();
   }
}
</code></pre>

<p>This code snippet makes use of the <code>exec</code> module of node. The <code>directory</code> parameter points to the served folder in your filesystem. This code above lacks some initialisation methods, but you can install the whole middleware function from the <a href="https://npmjs.org/package/connect-php">NPM registry</a> via</p>

<pre><code>
npm install connect-php
</code></pre>

<h2>Include the new middleware in your Gruntfile.js</h2>

<p>Always keep in mind that your Gruntfile.js is not only a configuration, but a JavaScript file. You can code there. And if necessary, you should!</p>

<p>So the first thing we are going to do is require our new module:</p>

<pre><code class="language-javscript">
//Add this to the beginning of your Gruntfile.js
var phpMiddleware = require('connect-php');
</code></pre>

<p>Then, as mentioned above, we are going to recreate <strong>grunt-contrib-connect</strong>'s middleware function, directly where you have your connect task:</p>

<pre><code class="language-javascript">
grunt.initConfig({
  ...
  connect: {
    options: {
      port: 9000,
      livereload: 35729,
      hostname: 'localhost',
      middleware: function(connect, options) {
        // Add here the code snippet below                   
      }
    },
    ...
  }
});
</code></pre>

<pre><code class="language-javascript">
middleware: function(connect, options) {
    // Same as in grunt-contrib-connect
  var middlewares = [];
  var directory = options.directory ||
    options.base[options.base.length - 1];
  if (!Array.isArray(options.base)) {
    options.base = [options.base];
  }

  // Here comes the PHP middleware
  middlewares.push(phpMiddleware(directory));

    // Same as in grunt-contrib-connect
  options.base.forEach(function(base) {
    middlewares.push(connect.static(base));
  });

  middlewares.push(connect.directory(directory));
  return middlewares;
}
</code></pre>

<p>And that's it. You are now able to parse basic PHP files!</p>

<h2>Bottom line</h2>

<p>Actually, the whole PHP thing is just a way of showing you how to extend <strong>connect</strong> with middleware that serves your own needs. For us, the possibility of <code>echo</code>-ing and <code>include</code>-ing in PHP is enough to develop our website templates without having broken output while coding. It still lacks major features, but it's a good start. I'm thinking of reworking the script to tunnel all requests to a spawned PHP server to fill this gap, so stay tuned!</p>

<p>Trying to extend our developing environment with this certain feature taught me a lot about the mechanics behind <strong>Grunt.js</strong> and the Node.js cosmos behind that. I think it's the beauty of <strong>Grunt.js</strong> to demand nothing more than being a simple task runner for node tasks, and thus being exceptionally extensible. We didn't have this freedom and power with all the other build tools and developing environments we had before.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date>2013-11-17 17:14:26</wp:post_date>
		<wp:post_date_gmt>2013-11-17 15:14:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-magic-of-grunt-contrib-connect-and-how-to-run-php-with-it</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="connect"><![CDATA[connect]]></category>
		<category domain="post_tag" nicename="grunt"><![CDATA[Grunt]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="tools"><![CDATA[Tools]]></category>
		<category domain="category" nicename="workflows"><![CDATA[Workflows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_sd_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2484</wp:comment_id>
			<wp:comment_author><![CDATA[Using grunt-connect-proxy | frontend technology talk]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://fettblog.eu/blog/2013/09/20/using-grunt-connect-proxy/</wp:comment_author_url>
			<wp:comment_author_IP>81.19.145.238</wp:comment_author_IP>
			<wp:comment_date>2013-11-23 08:21:49</wp:comment_date>
			<wp:comment_date_gmt>2013-11-23 06:21:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] easy anymore to add middleware than it was before. I addressed this topic in my recent article on The magic behind grunt-contrib-connect. Check it out and add your proxySnippet where it [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385187973.4604890346527099609375;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385187709.367806911468505859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
